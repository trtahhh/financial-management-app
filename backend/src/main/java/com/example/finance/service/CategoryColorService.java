package com.example.finance.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Slf4j
@Service
public class CategoryColorService {

    // B·∫£ng m√†u c·ªë ƒë·ªãnh cho c√°c category ph·ªï bi·∫øn - ƒë·∫£m b·∫£o kh√¥ng tr√πng l·∫∑p
    private static final Map<String, String> CATEGORY_COLOR_MAP = new HashMap<>();
    
    static {
        // Income categories - m√†u xanh l√° v√† xanh d∆∞∆°ng
        CATEGORY_COLOR_MAP.put("L∆∞∆°ng", "#27AE60");           // Xanh l√° ƒë·∫≠m
        CATEGORY_COLOR_MAP.put("Thu nh·∫≠p kh√°c", "#2980B9");   // Xanh d∆∞∆°ng ƒë·∫≠m
        CATEGORY_COLOR_MAP.put("ƒê·∫ßu t∆∞", "#8E44AD");          // T√≠m ƒë·∫≠m
        CATEGORY_COLOR_MAP.put("Kinh doanh", "#E67E22");      // Cam
        
        // Expense categories - m√†u ƒëa d·∫°ng
        CATEGORY_COLOR_MAP.put("ƒÇn u·ªëng", "#FF6B6B");         // ƒê·ªè cam
        CATEGORY_COLOR_MAP.put("Giao th√¥ng", "#4ECDC4");      // Xanh l√°
        CATEGORY_COLOR_MAP.put("Gi·∫£i tr√≠", "#45B7D1");        // Xanh d∆∞∆°ng
        CATEGORY_COLOR_MAP.put("S·ª©c kh·ªèe", "#96CEB4");        // Xanh l√° nh·∫°t
        CATEGORY_COLOR_MAP.put("Gi√°o d·ª•c", "#FFEAA7");        // V√†ng
        CATEGORY_COLOR_MAP.put("Mua s·∫Øm", "#DDA0DD");         // T√≠m
        CATEGORY_COLOR_MAP.put("Ti·ªán √≠ch", "#98D8C8");        // Xanh l√° ƒë·∫≠m
        CATEGORY_COLOR_MAP.put("Du l·ªãch", "#F7DC6F");         // V√†ng cam
        CATEGORY_COLOR_MAP.put("Th·ªÉ thao", "#BB8FCE");        // T√≠m nh·∫°t
        CATEGORY_COLOR_MAP.put("Kh√°c", "#95A5A6");            // X√°m
        
        // Backup colors cho c√°c category kh√°c
        CATEGORY_COLOR_MAP.put("default", "#FF6384");         // H·ªìng
    }
    
    // B·∫£ng m√†u d·ª± ph√≤ng cho c√°c category kh√¥ng c√≥ trong map c·ªë ƒë·ªãnh
    private static final String[] BACKUP_COLORS = {
        "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40",
        "#FF6B9D", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7",
        "#DDA0DD", "#98D8C8", "#F7DC6F", "#BB8FCE", "#85C1E9",
        "#F8C471", "#82E0AA", "#F1948A", "#85C1E9", "#D7BDE2"
    };
    
    private int backupColorIndex = 0;
    
    /**
     * L·∫•y m√†u cho category, ƒë·∫£m b·∫£o kh√¥ng tr√πng l·∫∑p
     */
    public String getCategoryColor(String categoryName) {
        if (categoryName == null || categoryName.trim().isEmpty()) {
            return getNextBackupColor();
        }
        
        // T√¨m ki·∫øm ch√≠nh x√°c
        String exactMatch = CATEGORY_COLOR_MAP.get(categoryName);
        if (exactMatch != null) {
            return exactMatch;
        }
        
        // T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
        String caseInsensitiveMatch = CATEGORY_COLOR_MAP.entrySet().stream()
            .filter(entry -> entry.getKey().equalsIgnoreCase(categoryName))
            .map(Map.Entry::getValue)
            .findFirst()
            .orElse(null);
            
        if (caseInsensitiveMatch != null) {
            return caseInsensitiveMatch;
        }
        
        // N·∫øu kh√¥ng t√¨m th·∫•y, s·ª≠ d·ª•ng m√†u d·ª± ph√≤ng
        log.info("üé® No predefined color found for category: {}, using backup color", categoryName);
        return getNextBackupColor();
    }
    
    /**
     * L·∫•y m√†u d·ª± ph√≤ng theo th·ª© t·ª±
     */
    private String getNextBackupColor() {
        String color = BACKUP_COLORS[backupColorIndex % BACKUP_COLORS.length];
        backupColorIndex++;
        return color;
    }
    
    /**
     * L·∫•y t·∫•t c·∫£ m√†u category ƒë·ªÉ frontend c√≥ th·ªÉ s·ª≠ d·ª•ng
     */
    public Map<String, String> getAllCategoryColors() {
        return new HashMap<>(CATEGORY_COLOR_MAP);
    }
    
    /**
     * Th√™m m√†u m·ªõi cho category
     */
    public void addCategoryColor(String categoryName, String color) {
        if (categoryName != null && color != null) {
            CATEGORY_COLOR_MAP.put(categoryName, color);
            log.info("üé® Added color {} for category: {}", color, categoryName);
        }
    }
    
    /**
     * Reset index m√†u d·ª± ph√≤ng
     */
    public void resetBackupColorIndex() {
        backupColorIndex = 0;
    }
}
