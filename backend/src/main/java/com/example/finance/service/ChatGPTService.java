package com.example.finance.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;

@Service
@Slf4j
@RequiredArgsConstructor
public class ChatGPTService {

    @Value("${spring.ai.openai.api-key}")
    private String apiKey;

    @Value("${spring.ai.openai.base-url}")
    private String apiUrl;

    @Value("${spring.ai.openai.chat.model}")
    private String model;

    private final RestTemplate restTemplate;

    public String getChatResponse(String message) {
        if (apiKey == null || apiKey.trim().isEmpty()) {
            return getFallbackResponse(message);
        }

        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBearerAuth(apiKey);
            headers.set("HTTP-Referer", "https://finance-app.com");

            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("model", model);
            requestBody.put("max_tokens", 500);
            requestBody.put("temperature", 0.7);

            List<Map<String, String>> messages = new ArrayList<>();
            
            Map<String, String> systemMessage = new HashMap<>();
            systemMessage.put("role", "system");
            systemMessage.put("content", "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI t√†i ch√≠nh th√¥ng minh. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát ng·∫Øn g·ªçn v√† r√µ r√†ng.");
            messages.add(systemMessage);

            Map<String, String> userMessage = new HashMap<>();
            userMessage.put("role", "user");
            userMessage.put("content", message);
            messages.add(userMessage);

            requestBody.put("messages", messages);

            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

            ResponseEntity<Map<String, Object>> response = restTemplate.exchange(
                apiUrl, 
                HttpMethod.POST, 
                request, 
                new ParameterizedTypeReference<Map<String, Object>>() {}
            );
            
            // Ki·ªÉm tra null response body
            Map<String, Object> responseBody = response.getBody();
            if (responseBody == null) {
                log.warn("Empty response body from API");
                return getFallbackResponse(message);
            }

            @SuppressWarnings("unchecked")
            List<Map<String, Object>> choices = (List<Map<String, Object>>) responseBody.get("choices");
            
            if (choices != null && !choices.isEmpty()) {
                Map<String, Object> choice = choices.get(0);
                
                @SuppressWarnings("unchecked")
                Map<String, Object> messageObj = (Map<String, Object>) choice.get("message");
                
                if (messageObj != null) {
                    String content = (String) messageObj.get("content");
                    if (content != null && !content.trim().isEmpty()) {
                        return content;
                    }
                }
            }

            return getFallbackResponse(message);

        } catch (Exception e) {
            log.error("Error calling AI API: {}", e.getMessage());
            return getFallbackResponse(message);
        }
    }

    private String getFallbackResponse(String message) {
        String[] defaultResponses = {
            "ü§ñ T√¥i l√† tr·ª£ l√Ω AI ƒëa nƒÉng! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n‚Ä¢ T√†i ch√≠nh c√° nh√¢n v√† ƒë·∫ßu t∆∞\n‚Ä¢ Ki·∫øn th·ª©c t·ªïng qu√°t\n‚Ä¢ C√¥ng ngh·ªá v√† m√°y t√≠nh\n‚Ä¢ Gi√°o d·ª•c v√† h·ªçc t·∫≠p\n‚Ä¢ Cu·ªôc s·ªëng v√† s·ª©c kh·ªèe\n‚Ä¢ V√† nhi·ªÅu ch·ªß ƒë·ªÅ kh√°c!\n\nH√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ b·∫°n mu·ªën bi·∫øt!",
            
            "üí° T√¥i s·∫µn s√†ng tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n! D√π b·∫°n mu·ªën bi·∫øt v·ªÅ t√†i ch√≠nh, c√¥ng ngh·ªá, gi√°o d·ª•c, s·ª©c kh·ªèe hay b·∫•t k·ª≥ ch·ªß ƒë·ªÅ n√†o kh√°c, t√¥i s·∫Ω c·ªë g·∫Øng h·∫øt s·ª©c ƒë·ªÉ gi√∫p ƒë·ª°.",
            
            "üéØ C√¢u h·ªèi th√∫ v·ªã! M·∫∑c d√π t√¥i c√≥ th·ªÉ kh√¥ng c√≥ th√¥ng tin chi ti·∫øt v·ªÅ m·ªçi ch·ªß ƒë·ªÅ, nh∆∞ng t√¥i s·∫Ω c·ªë g·∫Øng cung c·∫•p th√¥ng tin h·ªØu √≠ch ho·∫∑c h∆∞·ªõng d·∫´n b·∫°n t√¨m ki·∫øm th√¥ng tin ch√≠nh x√°c t·ª´ ngu·ªìn ƒë√°ng tin c·∫≠y.",
            
            "üåü T√¥i c√≥ th·ªÉ tr√≤ chuy·ªán v·ªÅ nhi·ªÅu ch·ªß ƒë·ªÅ kh√°c nhau! T·ª´ nh·ªØng c√¢u h·ªèi th∆∞·ªùng ng√†y ƒë·∫øn c√°c v·∫•n ƒë·ªÅ ph·ª©c t·∫°p, t√¥i s·∫Ω c·ªë g·∫Øng h·ªó tr·ª£ b·∫°n m·ªôt c√°ch t·ªët nh·∫•t c√≥ th·ªÉ.",
            
            "H√£y c·ª© tho·∫£i m√°i h·ªèi t√¥i! T√¥i c√≥ th·ªÉ th·∫£o lu·∫≠n v·ªÅ t√†i ch√≠nh, c√¥ng ngh·ªá, khoa h·ªçc, vƒÉn h√≥a, gi·∫£i tr√≠, v√† r·∫•t nhi·ªÅu ch·ªß ƒë·ªÅ kh√°c. C√¢u h·ªèi c·ªßa b·∫°n l√† g√¨?"
        };

        return defaultResponses[new Random().nextInt(defaultResponses.length)];
    }
}