package com.example.finance.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import com.example.finance.entity.Transaction;
import com.example.finance.entity.Budget;
import com.example.finance.entity.Goal;
import com.example.finance.dto.BudgetDTO;
import com.example.finance.dto.GoalDTO;

@Service
public class AIFinanceService {

    @Autowired
    private ReportService reportService;
    
    @Autowired
    private TransactionService transactionService;
    
    @Autowired
    private BudgetService budgetService;
    
    @Autowired
    private GoalService goalService;
    
    @Autowired
    private WalletService walletService;
    
    @Autowired
    private OpenRouterService openRouterService;

    // T·ª´ kh√≥a cho c√°c ch·ªß ƒë·ªÅ t√†i ch√≠nh
    private static final Map<String, List<String>> KEYWORDS = new HashMap<>();
    
    static {
        KEYWORDS.put("saving", Arrays.asList("ti·∫øt ki·ªám", "ti·∫øt ki·ªám ti·ªÅn", "ti·∫øt ki·ªám chi ph√≠", "ti·∫øt ki·ªám hi·ªáu qu·∫£", "ti·∫øt ki·ªám th√¥ng minh"));
        KEYWORDS.put("investment", Arrays.asList("ƒë·∫ßu t∆∞", "ƒë·∫ßu t∆∞ ti·ªÅn", "ƒë·∫ßu t∆∞ th√¥ng minh", "ƒë·∫ßu t∆∞ an to√†n", "ƒë·∫ßu t∆∞ sinh l·ªùi"));
        KEYWORDS.put("budget", Arrays.asList("ng√¢n s√°ch", "qu·∫£n l√Ω ng√¢n s√°ch", "l·∫≠p ng√¢n s√°ch", "ki·ªÉm so√°t chi ti√™u", "k·∫ø ho·∫°ch t√†i ch√≠nh"));
        KEYWORDS.put("debt", Arrays.asList("n·ª£", "vay ti·ªÅn", "tr·∫£ n·ª£", "qu·∫£n l√Ω n·ª£", "gi·∫£m n·ª£"));
        KEYWORDS.put("income", Arrays.asList("thu nh·∫≠p", "tƒÉng thu nh·∫≠p", "ki·∫øm ti·ªÅn", "l∆∞∆°ng", "l·ª£i nhu·∫≠n"));
        KEYWORDS.put("expense", Arrays.asList("chi ti√™u", "chi ph√≠", "ti√™u ti·ªÅn", "qu·∫£n l√Ω chi ti√™u", "ki·ªÉm so√°t chi ph√≠"));
        KEYWORDS.put("report", Arrays.asList("b√°o c√°o", "report", "th·ªëng k√™", "t·ªïng h·ª£p", "xu·∫•t b√°o c√°o", "t·∫°o b√°o c√°o", "excel", "pdf"));
        KEYWORDS.put("analysis", Arrays.asList("ph√¢n t√≠ch", "ƒë√°nh gi√°", "so s√°nh", "xu h∆∞·ªõng", "d·ª± b√°o", "d·ª± ƒëo√°n"));
        KEYWORDS.put("advice", Arrays.asList("t∆∞ v·∫•n", "l·ªùi khuy√™n", "g·ª£i √Ω", "h∆∞·ªõng d·∫´n", "c√°ch l√†m"));
        KEYWORDS.put("thanks", Arrays.asList("c·∫£m ∆°n", "thanks", "thank you", "c·∫£m ∆°n b·∫°n", "t·ªët"));
        KEYWORDS.put("help", Arrays.asList("gi√∫p", "help", "h·ªó tr·ª£", "l√†m sao", "c√°ch n√†o"));
    }

    public String processMessage(String message) {
        String normalizedMessage = message.toLowerCase().trim();

        // Ki·ªÉm tra xem c√≥ ph·∫£i y√™u c·∫ßu xu·∫•t file kh√¥ng
        if (isExportRequest(normalizedMessage)) {
            return processExportRequest(message);
        }

        // Ki·ªÉm tra xem c√≥ ph·∫£i y√™u c·∫ßu b√°o c√°o kh√¥ng
        if (isReportRequest(normalizedMessage)) {
            return processReportRequest(message);
        }

        // Ki·ªÉm tra xem c√≥ ph·∫£i y√™u c·∫ßu ph√¢n t√≠ch t√†i ch√≠nh kh√¥ng
        if (isFinancialAnalysisRequest(normalizedMessage)) {
            return processFinancialAnalysisRequest(message);
        }
        
        // Ki·ªÉm tra xem c√≥ ph·∫£i y√™u c·∫ßu chat AI kh√¥ng
        if (isAIChatRequest(normalizedMessage)) {
            return processAIChatRequest(message);
        }
        
        // Ph√¢n lo·∫°i tin nh·∫Øn
        String category = classifyMessage(normalizedMessage);
        return generateResponse(category, normalizedMessage);
    }
    
    private String processExportRequest(String message) {
        StringBuilder response = new StringBuilder();
        response.append("**üìä XU·∫§T FILE B√ÅO C√ÅO**\n\n");
        
        if (message.toLowerCase().contains("excel") || message.toLowerCase().contains("xlsx")) {
            response.append("**Excel (.xlsx)**:\n");
            response.append("‚Ä¢ B√°o c√°o giao d·ªãch chi ti·∫øt\n");
            response.append("‚Ä¢ B√°o c√°o ng√¢n s√°ch\n");
            response.append("‚Ä¢ B√°o c√°o m·ª•c ti√™u\n");
            response.append("‚Ä¢ ƒê·ªãnh d·∫°ng b·∫£ng ƒë·∫πp m·∫Øt\n\n");
            response.append("**C√°ch s·ª≠ d·ª•ng**:\n");
            response.append("‚Ä¢ S·ª≠ d·ª•ng n√∫t 'Excel (.xlsx)' trong template\n");
            response.append("‚Ä¢ Ho·∫∑c g√µ: 'xu·∫•t b√°o c√°o Excel th√°ng n√†y'\n");
        } else if (message.toLowerCase().contains("pdf")) {
            response.append("**PDF (.pdf)**:\n");
            response.append("‚Ä¢ B√°o c√°o chuy√™n nghi·ªáp\n");
            response.append("‚Ä¢ D·ªÖ in ·∫•n v√† chia s·∫ª\n");
            response.append("‚Ä¢ ƒê·ªãnh d·∫°ng chu·∫©n\n\n");
            response.append("**C√°ch s·ª≠ d·ª•ng**:\n");
            response.append("‚Ä¢ S·ª≠ d·ª•ng n√∫t 'PDF (.pdf)' trong template\n");
            response.append("‚Ä¢ Ho·∫∑c g√µ: 'xu·∫•t b√°o c√°o PDF th√°ng n√†y'\n");
        } else {
            response.append("**C√°c ƒë·ªãnh d·∫°ng h·ªó tr·ª£**:\n");
            response.append("‚Ä¢ **Excel (.xlsx)**: B·∫£ng t√≠nh chi ti·∫øt\n");
            response.append("‚Ä¢ **PDF (.pdf)**: T√†i li·ªáu chuy√™n nghi·ªáp\n\n");
            response.append("**H∆∞·ªõng d·∫´n**:\n");
            response.append("‚Ä¢ S·ª≠ d·ª•ng c√°c n√∫t xu·∫•t file trong template\n");
            response.append("‚Ä¢ Ho·∫∑c g√µ: 'xu·∫•t b√°o c√°o Excel/PDF th√°ng n√†y'\n");
        }
        
        response.append("\n**üí° L∆∞u √Ω**: File s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ tr·ª±c ti·∫øp, kh√¥ng c·∫ßn copy/paste!");
        
        return response.toString();
    }
    
        private boolean isAIChatRequest(String message) {
        // AI c√≥ th·ªÉ tr·∫£ l·ªùi t·∫•t c·∫£ m·ªçi c√¢u h·ªèi
        // Ch·ªâ lo·∫°i tr·ª´ c√°c y√™u c·∫ßu xu·∫•t file c·ª• th·ªÉ
        return !isExportRequest(message);
    }
    
    private String processAIChatRequest(String message) {
        try {
            // T·∫°o context t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø c·ªßa user
            String userContext = createUserFinancialContext();
            
            // T·∫°o prompt th√¥ng minh k·∫øt h·ª£p context
            String enhancedPrompt = createEnhancedPrompt(message, userContext);
            
            // G·ªçi OpenRouter API
            String aiResponse = openRouterService.chat(enhancedPrompt);
            
            // K·∫øt h·ª£p response AI v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø
            return combineAIResponseWithRealData(aiResponse, message);
            
        } catch (Exception e) {
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi AI l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng ph√¢n t√≠ch c√≥ s·∫µn.";
        }
    }
    
    private String createUserFinancialContext() {
        try {
            // TODO: L·∫•y userId th·ª±c t·∫ø t·ª´ JWT token
            Long userId = 1L; // T·∫°m th·ªùi hardcode
            
            StringBuilder context = new StringBuilder();
            context.append("**T√åNH H√åNH T√ÄI CH√çNH HI·ªÜN T·∫†I:**\n");
            
            // L·∫•y th√¥ng tin giao d·ªãch g·∫ßn ƒë√¢y
            List<Map<String, Object>> recentTransactions = transactionService.getRecentTransactions(userId, 5);
            if (!recentTransactions.isEmpty()) {
                context.append("‚Ä¢ Giao d·ªãch g·∫ßn ƒë√¢y: ").append(recentTransactions.size()).append(" giao d·ªãch\n");
            }
            
            // L·∫•y th√¥ng tin ng√¢n s√°ch
            List<BudgetDTO> budgets = budgetService.getAllBudgets(userId);
            if (!budgets.isEmpty()) {
                context.append("‚Ä¢ S·ªë ng√¢n s√°ch ƒëang qu·∫£n l√Ω: ").append(budgets.size()).append(" danh m·ª•c\n");
            }
            
            // L·∫•y th√¥ng tin m·ª•c ti√™u
            List<GoalDTO> goals = goalService.findByUserId(userId);
            if (!goals.isEmpty()) {
                context.append("‚Ä¢ S·ªë m·ª•c ti√™u ƒëang theo d√µi: ").append(goals.size()).append(" m·ª•c ti√™u\n");
            }
            
            context.append("\n");
            return context.toString();
            
        } catch (Exception e) {
            return "";
        }
    }
    
    private String createEnhancedPrompt(String userMessage, String context) {
        return String.format(
            "B·∫°n l√† m·ªôt AI tr·ª£ l√Ω th√¥ng minh v√† th√¢n thi·ªán. D·ª±a tr√™n th√¥ng tin sau:\n\n" +
            "%s\n\n" +
            "V√† c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: \"%s\"\n\n" +
            "H√£y tr·∫£ l·ªùi m·ªôt c√°ch to√†n di·ªán, h·ªØu √≠ch v√† th√¢n thi·ªán. " +
            "Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin. " +
            "N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn t√†i ch√≠nh, h√£y ƒë∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø v√† c·ª• th·ªÉ. " +
            "N·∫øu c√¢u h·ªèi v·ªÅ ch·ªß ƒë·ªÅ kh√°c, h√£y tr·∫£ l·ªùi m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch. " +
            "Lu√¥n gi·ªØ gi·ªçng ƒëi·ªáu th√¢n thi·ªán v√† s·∫µn s√†ng gi√∫p ƒë·ª°.",
            context, userMessage
        );
    }
    
    private String combineAIResponseWithRealData(String aiResponse, String message) {
        StringBuilder combinedResponse = new StringBuilder();
        combinedResponse.append(aiResponse).append("\n\n");
        
        // Th√™m g·ª£i √Ω d·ª±a tr√™n lo·∫°i c√¢u h·ªèi
        if (message.toLowerCase().contains("ti·∫øt ki·ªám") || message.toLowerCase().contains("chi ti√™u")) {
            combinedResponse.append("**üí° G·ª£i √Ω th√™m**: B·∫°n c√≥ th·ªÉ y√™u c·∫ßu 't·∫°o b√°o c√°o chi ti√™u th√°ng n√†y' ƒë·ªÉ xem chi ti·∫øt t√¨nh h√¨nh th·ª±c t·∫ø c·ªßa m√¨nh.");
        } else if (message.toLowerCase().contains("ƒë·∫ßu t∆∞") || message.toLowerCase().contains("tƒÉng tr∆∞·ªüng")) {
            combinedResponse.append("**üí° G·ª£i √Ω th√™m**: B·∫°n c√≥ th·ªÉ y√™u c·∫ßu 'ph√¢n t√≠ch thu nh·∫≠p v√† xu h∆∞·ªõng' ƒë·ªÉ ƒë√°nh gi√° ti·ªÅm nƒÉng ƒë·∫ßu t∆∞.");
        } else if (message.toLowerCase().contains("ng√¢n s√°ch") || message.toLowerCase().contains("k·∫ø ho·∫°ch")) {
            combinedResponse.append("**üí° G·ª£i √Ω th√™m**: B·∫°n c√≥ th·ªÉ y√™u c·∫ßu 'b√°o c√°o ng√¢n s√°ch chi ti·∫øt' ƒë·ªÉ xem hi·ªáu qu·∫£ qu·∫£n l√Ω ng√¢n s√°ch.");
        } else if (message.toLowerCase().contains("b√°o c√°o") || message.toLowerCase().contains("th·ªëng k√™")) {
            combinedResponse.append("**üí° G·ª£i √Ω th√™m**: B·∫°n c√≥ th·ªÉ y√™u c·∫ßu xu·∫•t b√°o c√°o Excel ho·∫∑c PDF b·∫±ng c√°ch s·ª≠ d·ª•ng c√°c n√∫t template c√≥ s·∫µn.");
        }
        
        return combinedResponse.toString();
    }

    private boolean isReportRequest(String message) {
        String[] reportKeywords = {"b√°o c√°o", "report", "th·ªëng k√™", "t·ªïng h·ª£p", "t·∫°o b√°o c√°o"};
        for (String keyword : reportKeywords) {
            if (message.contains(keyword)) {
                return true;
            }
        }
        return false;
    }
    
    private boolean isExportRequest(String message) {
        String[] exportKeywords = {"xu·∫•t", "excel", "pdf", "xlsx", "download", "t·∫£i v·ªÅ"};
        for (String keyword : exportKeywords) {
            if (message.toLowerCase().contains(keyword)) {
                return true;
            }
        }
        return false;
    }

    private boolean isFinancialAnalysisRequest(String message) {
        String[] analysisKeywords = {"ph√¢n t√≠ch", "ƒë√°nh gi√°", "so s√°nh", "xu h∆∞·ªõng", "d·ª± b√°o", "d·ª± ƒëo√°n", "t∆∞ v·∫•n", "l·ªùi khuy√™n"};
        for (String keyword : analysisKeywords) {
            if (message.contains(keyword)) {
                return true;
            }
        }
        return false;
    }

    private String processReportRequest(String message) {
        try {
            // T·∫°m th·ªùi s·ª≠ d·ª•ng username m·∫∑c ƒë·ªãnh, trong th·ª±c t·∫ø s·∫Ω l·∫•y t·ª´ JWT token
            String username = "admin"; // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
            Long userId = reportService.getUserIdByUsername(username);

            // Ph√¢n t√≠ch lo·∫°i b√°o c√°o t·ª´ tin nh·∫Øn
            String reportType = determineReportType(message);

            // Ph√¢n t√≠ch tham s·ªë t·ª´ tin nh·∫Øn
            Map<String, Object> params = extractReportParams(message);

            // T·∫°o b√°o c√°o
            String report = reportService.generateTextReport(
                userId,
                reportType,
                (String) params.get("dateFrom"),
                (String) params.get("dateTo"),
                (Integer) params.get("month"),
                (Integer) params.get("year")
            );

            // Ki·ªÉm tra xem c√≥ y√™u c·∫ßu xu·∫•t Excel/PDF kh√¥ng
            if (message.toLowerCase().contains("excel") || message.toLowerCase().contains("pdf")) {
                return report + "\n\n**L∆∞u √Ω**: B·∫°n ƒë√£ y√™u c·∫ßu xu·∫•t " + 
                       (message.toLowerCase().contains("excel") ? "Excel" : "PDF") + 
                       ".\n\n" +
                       "**H∆∞·ªõng d·∫´n xu·∫•t file**:\n" +
                       "‚Ä¢ **Excel**: Copy n·ªôi dung b√°o c√°o ‚Üí Paste v√†o Excel ‚Üí L∆∞u v·ªõi ƒë·ªãnh d·∫°ng .xlsx\n" +
                       "‚Ä¢ **PDF**: Copy n·ªôi dung b√°o c√°o ‚Üí Paste v√†o Word ‚Üí L∆∞u v·ªõi ƒë·ªãnh d·∫°ng .pdf\n\n" +
                       "**T√≠nh nƒÉng n√¢ng cao**:\n" +
                       "‚Ä¢ B√°o c√°o t·ªïng h·ª£p: 't·∫°o b√°o c√°o t·ªïng h·ª£p th√°ng n√†y'\n" +
                       "‚Ä¢ B√°o c√°o giao d·ªãch: 'b√°o c√°o giao d·ªãch t·ª´ 01/01 ƒë·∫øn 31/01'\n" +
                       "‚Ä¢ B√°o c√°o ng√¢n s√°ch: 'b√°o c√°o ng√¢n s√°ch th√°ng 12 nƒÉm 2024'";
            }

            return report + "\n\n**L∆∞u √Ω**: B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông. B·∫°n c√≥ th·ªÉ y√™u c·∫ßu:\n" +
                   "‚Ä¢ B√°o c√°o t·ªïng h·ª£p: 't·∫°o b√°o c√°o t·ªïng h·ª£p th√°ng n√†y'\n" +
                   "‚Ä¢ B√°o c√°o giao d·ªãch: 'b√°o c√°o giao d·ªãch t·ª´ 01/01 ƒë·∫øn 31/01'\n" +
                   "‚Ä¢ B√°o c√°o ng√¢n s√°ch: 'b√°o c√°o ng√¢n s√°ch th√°ng 12 nƒÉm 2024'\n" +
                   "‚Ä¢ Xu·∫•t Excel: 't·∫°o b√°o c√°o Excel th√°ng n√†y'\n" +
                   "‚Ä¢ Xu·∫•t PDF: 't·∫°o b√°o c√°o PDF th√°ng n√†y'";

        } catch (Exception e) {
                    return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o b√°o c√°o l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.\n\n" +
               "**G·ª£i √Ω**: B·∫°n c√≥ th·ªÉ y√™u c·∫ßu:\n" +
                   "‚Ä¢ 'T·∫°o b√°o c√°o t·ªïng h·ª£p'\n" +
                   "‚Ä¢ 'B√°o c√°o giao d·ªãch th√°ng n√†y'\n" +
                   "‚Ä¢ 'B√°o c√°o ng√¢n s√°ch th√°ng 12'\n" +
                   "‚Ä¢ 'Xu·∫•t b√°o c√°o Excel'\n" +
                   "‚Ä¢ 'Xu·∫•t b√°o c√°o PDF'";
        }
    }

    private String processFinancialAnalysisRequest(String message) {
        String lowerMessage = message.toLowerCase();
        
        // Ki·ªÉm tra xem c√≥ y√™u c·∫ßu ph√¢n t√≠ch d·ªØ li·ªáu th·ª±c t·∫ø kh√¥ng
        if (lowerMessage.contains("ph√¢n t√≠ch th·ª±c t·∫ø") || lowerMessage.contains("d·ªØ li·ªáu c·ªßa t√¥i") || 
            lowerMessage.contains("t√¨nh h√¨nh hi·ªán t·∫°i") || lowerMessage.contains("ph√¢n t√≠ch c√° nh√¢n")) {
            return analyzeRealFinancialData(message);
        }
        
        if (lowerMessage.contains("ph√¢n t√≠ch") || lowerMessage.contains("ƒë√°nh gi√°")) {
            if (lowerMessage.contains("chi ti√™u") || lowerMessage.contains("chi ph√≠")) {
                return analyzeExpenses(message);
            } else if (lowerMessage.contains("thu nh·∫≠p") || lowerMessage.contains("ki·∫øm ti·ªÅn")) {
                return analyzeIncome(message);
            } else if (lowerMessage.contains("ng√¢n s√°ch")) {
                return analyzeBudget(message);
            } else {
                return provideGeneralFinancialAnalysis();
            }
        } else if (lowerMessage.contains("t∆∞ v·∫•n") || lowerMessage.contains("l·ªùi khuy√™n")) {
            return provideFinancialAdvice(message);
        } else if (lowerMessage.contains("d·ª± b√°o") || lowerMessage.contains("d·ª± ƒëo√°n")) {
            return provideFinancialForecast(message);
        }
        
        return provideGeneralFinancialAnalysis();
    }
    
    private String analyzeRealFinancialData(String message) {
        StringBuilder analysis = new StringBuilder();
        analysis.append("**PH√ÇN T√çCH T√ÄI CH√çNH D·ª∞A TR√äN D·ªÆ LI·ªÜU TH·ª∞C T·∫æ**\n\n");
        
        try {
            // TODO: Implement real data analysis
            // Hi·ªán t·∫°i s·∫Ω tr·∫£ v·ªÅ h∆∞·ªõng d·∫´n, sau n√†y s·∫Ω t√≠ch h·ª£p v·ªõi database
            
            analysis.append("**üìä ƒê·ªÉ c√≥ ph√¢n t√≠ch chi ti·∫øt d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø, h√£y y√™u c·∫ßu:**\n");
            analysis.append("‚Ä¢ 'Ph√¢n t√≠ch chi ti√™u th√°ng n√†y'\n");
            analysis.append("‚Ä¢ 'B√°o c√°o ng√¢n s√°ch chi ti·∫øt'\n");
            analysis.append("‚Ä¢ 'ƒê√°nh gi√° ti·∫øn ƒë·ªô m·ª•c ti√™u'\n");
            analysis.append("‚Ä¢ 'T√¨nh h√¨nh t√†i ch√≠nh hi·ªán t·∫°i'\n\n");
            
            analysis.append("**üí° L·ªúI KHUY√äN T·ªîNG QU√ÅT:**\n");
            analysis.append("1. **Ki·ªÉm so√°t chi ti√™u**: Ghi ch√©p chi ti√™u h√†ng ng√†y\n");
            analysis.append("2. **L·∫≠p ng√¢n s√°ch**: √Åp d·ª•ng quy t·∫Øc 50/30/20\n");
            analysis.append("3. **Ti·∫øt ki·ªám**: ƒê·∫∑t m·ª•c ti√™u r√µ r√†ng v√† ki√™n tr√¨\n");
            analysis.append("4. **ƒê·∫ßu t∆∞**: H·ªçc h·ªèi v√† b·∫Øt ƒë·∫ßu v·ªõi s·ªë ti·ªÅn nh·ªè\n");
            analysis.append("5. **Theo d√µi**: Ki·ªÉm tra t√¨nh h√¨nh t√†i ch√≠nh ƒë·ªãnh k·ª≥\n\n");
            
            analysis.append("**üîß T√≠nh nƒÉng s·∫Øp t·ªõi**:\n");
            analysis.append("‚Ä¢ Ph√¢n t√≠ch xu h∆∞·ªõng chi ti√™u theo th·ªùi gian\n");
            analysis.append("‚Ä¢ So s√°nh hi·ªáu su·∫•t ng√¢n s√°ch c√°c th√°ng\n");
            analysis.append("‚Ä¢ D·ª± b√°o t√†i ch√≠nh d·ª±a tr√™n d·ªØ li·ªáu qu√° kh·ª©\n");
            analysis.append("‚Ä¢ L·ªùi khuy√™n c√° nh√¢n h√≥a theo t√¨nh h√¨nh th·ª±c t·∫ø\n");
            
        } catch (Exception e) {
            analysis.append("‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu chi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.\n");
        }
        
        return analysis.toString();
    }

    private String analyzeExpenses(String message) {
        return "**PH√ÇN T√çCH CHI TI√äU TH√îNG MINH**\n\n" +
                               "**C√°ch ph√¢n t√≠ch chi ti√™u hi·ªáu qu·∫£**:\n" +
               "1. **Ph√¢n lo·∫°i chi ti√™u**:\n" +
               "   ‚Ä¢ Chi ti√™u c·∫ßn thi·∫øt (ƒÉn u·ªëng, ƒëi l·∫°i, nh√† ·ªü)\n" +
               "   ‚Ä¢ Chi ti√™u mong mu·ªën (gi·∫£i tr√≠, mua s·∫Øm)\n" +
               "   ‚Ä¢ Chi ti√™u ƒë·∫ßu t∆∞ (h·ªçc t·∫≠p, ph√°t tri·ªÉn b·∫£n th√¢n)\n\n" +
               "2. **Nguy√™n t·∫Øc 50/30/20**:\n" +
               "   ‚Ä¢ 50% cho nhu c·∫ßu c∆° b·∫£n\n" +
               "   ‚Ä¢ 30% cho mong mu·ªën c√° nh√¢n\n" +
               "   ‚Ä¢ 20% cho ti·∫øt ki·ªám v√† ƒë·∫ßu t∆∞\n\n" +
               "3. **C√¥ng c·ª• theo d√µi**:\n" +
               "   ‚Ä¢ S·ª≠ d·ª•ng ·ª©ng d·ª•ng qu·∫£n l√Ω t√†i ch√≠nh\n" +
               "   ‚Ä¢ Ghi ch√©p chi ti√™u h√†ng ng√†y\n" +
               "   ‚Ä¢ ƒê·∫∑t m·ª•c ti√™u chi ti√™u h√†ng th√°ng\n\n" +
               "**L·ªùi khuy√™n**: H√£y y√™u c·∫ßu 't·∫°o b√°o c√°o chi ti√™u th√°ng n√†y' ƒë·ªÉ xem chi ti·∫øt!";
    }

    private String analyzeIncome(String message) {
        return "**PH√ÇN T√çCH THU NH·∫¨P V√Ä TƒÇNG TR∆Ø·ªûNG**\n\n" +
               "**C√°ch tƒÉng thu nh·∫≠p hi·ªáu qu·∫£**:\n" +
               "1. **Ph√°t tri·ªÉn k·ªπ nƒÉng**:\n" +
               "   ‚Ä¢ H·ªçc th√™m ch·ª©ng ch·ªâ chuy√™n m√¥n\n" +
               "   ‚Ä¢ Tham gia kh√≥a h·ªçc online\n" +
               "   ‚Ä¢ ƒê·ªçc s√°ch v·ªÅ lƒ©nh v·ª±c chuy√™n m√¥n\n\n" +
               "2. **T·∫°o ngu·ªìn thu nh·∫≠p ph·ª•**:\n" +
               "   ‚Ä¢ Freelance online\n" +
               "   ‚Ä¢ B√°n h√†ng online\n" +
               "   ‚Ä¢ ƒê·∫ßu t∆∞ ch·ª©ng kho√°n\n\n" +
               "3. **T·ªëi ∆∞u h√≥a c√¥ng vi·ªác hi·ªán t·∫°i**:\n" +
               "   ‚Ä¢ ƒê√†m ph√°n tƒÉng l∆∞∆°ng\n" +
               "   ‚Ä¢ T√¨m ki·∫øm c∆° h·ªôi thƒÉng ti·∫øn\n" +
               "   ‚Ä¢ Chuy·ªÉn vi·ªác v·ªõi m·ª©c l∆∞∆°ng t·ªët h∆°n\n\n" +
               "**L·ªùi khuy√™n**: H√£y y√™u c·∫ßu 't·∫°o b√°o c√°o thu nh·∫≠p th√°ng n√†y' ƒë·ªÉ xem chi ti·∫øt!";
    }

    private String analyzeBudget(String message) {
        return "**PH√ÇN T√çCH NG√ÇN S√ÅCH V√Ä K·∫æ HO·∫†CH T√ÄI CH√çNH**\n\n" +
               "**C√°ch l·∫≠p ng√¢n s√°ch th√¥ng minh**:\n" +
               "1. **X√°c ƒë·ªãnh thu nh·∫≠p c·ªë ƒë·ªãnh**:\n" +
               "   ‚Ä¢ L∆∞∆°ng c∆° b·∫£n\n" +
               "   ‚Ä¢ Thu nh·∫≠p ph·ª•\n" +
               "   ‚Ä¢ Thu nh·∫≠p t·ª´ ƒë·∫ßu t∆∞\n\n" +
               "2. **Ph√¢n b·ªï ng√¢n s√°ch**:\n" +
               "   ‚Ä¢ 50% cho nhu c·∫ßu c∆° b·∫£n\n" +
               "   ‚Ä¢ 30% cho mong mu·ªën c√° nh√¢n\n" +
               "   ‚Ä¢ 20% cho ti·∫øt ki·ªám v√† ƒë·∫ßu t∆∞\n\n" +
               "3. **Theo d√µi v√† ƒëi·ªÅu ch·ªânh**:\n" +
               "   ‚Ä¢ Ki·ªÉm tra ng√¢n s√°ch h√†ng tu·∫ßn\n" +
               "   ‚Ä¢ ƒêi·ªÅu ch·ªânh khi c·∫ßn thi·∫øt\n" +
               "   ‚Ä¢ ƒê·∫∑t m·ª•c ti√™u ti·∫øt ki·ªám r√µ r√†ng\n\n" +
               "**L·ªùi khuy√™n**: H√£y y√™u c·∫ßu 't·∫°o b√°o c√°o ng√¢n s√°ch th√°ng n√†y' ƒë·ªÉ xem chi ti·∫øt!";
    }

    private String provideFinancialAdvice(String message) {
        String lowerMessage = message.toLowerCase();
        
        if (lowerMessage.contains("ti·∫øt ki·ªám")) {
            return "**L·ªúI KHUY√äN V·ªÄ TI·∫æT KI·ªÜM**\n\n" +
                   "1. **ƒê·∫∑t m·ª•c ti√™u r√µ r√†ng**:\n" +
                   "   ‚Ä¢ Ti·∫øt ki·ªám cho m·ª•c ƒë√≠ch c·ª• th·ªÉ\n" +
                   "   ‚Ä¢ ƒê·∫∑t th·ªùi h·∫°n ho√†n th√†nh\n" +
                   "   ‚Ä¢ Theo d√µi ti·∫øn ƒë·ªô th∆∞·ªùng xuy√™n\n\n" +
                   "2. **Ph∆∞∆°ng ph√°p ti·∫øt ki·ªám**:\n" +
                   "   ‚Ä¢ Ti·∫øt ki·ªám t·ª± ƒë·ªông (tr√≠ch l∆∞∆°ng)\n" +
                   "   ‚Ä¢ Ti·∫øt ki·ªám theo quy t·∫Øc 52 tu·∫ßn\n" +
                   "   ‚Ä¢ Ti·∫øt ki·ªám theo ph·∫ßn trƒÉm thu nh·∫≠p\n\n" +
                   "3. **T·ªëi ∆∞u h√≥a chi ti√™u**:\n" +
                   "   ‚Ä¢ Mua s·∫Øm th√¥ng minh\n" +
                   "   ‚Ä¢ S·ª≠ d·ª•ng m√£ gi·∫£m gi√°\n" +
                   "   ‚Ä¢ So s√°nh gi√° tr∆∞·ªõc khi mua";
        } else if (lowerMessage.contains("ƒë·∫ßu t∆∞")) {
            return "**L·ªúI KHUY√äN V·ªÄ ƒê·∫¶U T∆Ø**\n\n" +
                   "1. **Nguy√™n t·∫Øc c∆° b·∫£n**:\n" +
                   "   ‚Ä¢ ƒê·∫ßu t∆∞ d√†i h·∫°n\n" +
                   "   ‚Ä¢ ƒêa d·∫°ng h√≥a danh m·ª•c\n" +
                   "   ‚Ä¢ Kh√¥ng ƒë·∫ßu t∆∞ t·∫•t c·∫£ ti·ªÅn\n\n" +
                   "2. **C√°c k√™nh ƒë·∫ßu t∆∞**:\n" +
                   "   ‚Ä¢ G·ª≠i ti·∫øt ki·ªám ng√¢n h√†ng\n" +
                   "   ‚Ä¢ ƒê·∫ßu t∆∞ ch·ª©ng kho√°n\n" +
                   "   ‚Ä¢ ƒê·∫ßu t∆∞ b·∫•t ƒë·ªông s·∫£n\n" +
                   "   ‚Ä¢ ƒê·∫ßu t∆∞ v√†ng\n\n" +
                   "3. **Qu·∫£n l√Ω r·ªßi ro**:\n" +
                   "   ‚Ä¢ Ch·ªâ ƒë·∫ßu t∆∞ s·ªë ti·ªÅn c√≥ th·ªÉ m·∫•t\n" +
                   "   ‚Ä¢ T√¨m hi·ªÉu k·ªπ tr∆∞·ªõc khi ƒë·∫ßu t∆∞\n" +
                   "   ‚Ä¢ Tham kh·∫£o chuy√™n gia t√†i ch√≠nh";
        } else {
            return "**L·ªúI KHUY√äN T√ÄI CH√çNH T·ªîNG QU√ÅT**\n\n" +
                   "1. **X√¢y d·ª±ng n·ªÅn t·∫£ng v·ªØng ch·∫Øc**:\n" +
                   "   ‚Ä¢ Ti·∫øt ki·ªám kh·∫©n c·∫•p (3-6 th√°ng chi ti√™u)\n" +
                   "   ‚Ä¢ B·∫£o hi·ªÉm c∆° b·∫£n\n" +
                   "   ‚Ä¢ Qu·∫£n l√Ω n·ª£ hi·ªáu qu·∫£\n\n" +
                   "2. **Ph√°t tri·ªÉn b·ªÅn v·ªØng**:\n" +
                   "   ‚Ä¢ TƒÉng thu nh·∫≠p th∆∞·ªùng xuy√™n\n" +
                   "   ‚Ä¢ ƒê·∫ßu t∆∞ cho gi√°o d·ª•c\n" +
                   "   ‚Ä¢ X√¢y d·ª±ng k·∫ø ho·∫°ch d√†i h·∫°n\n\n" +
                   "3. **Th√≥i quen t·ªët**:\n" +
                   "   ‚Ä¢ Theo d√µi t√†i ch√≠nh h√†ng ng√†y\n" +
                   "   ‚Ä¢ ƒê·∫∑t m·ª•c ti√™u r√µ r√†ng\n" +
                   "   ‚Ä¢ Ki√™n tr√¨ v√† nh·∫´n n·∫°i";
        }
    }

    private String provideFinancialForecast(String message) {
        return "**D·ª∞ B√ÅO T√ÄI CH√çNH V√Ä XU H∆Ø·ªöNG**\n\n" +
               "**C√°ch d·ª± b√°o t√†i ch√≠nh c√° nh√¢n**:\n" +
               "1. **Ph√¢n t√≠ch d·ªØ li·ªáu qu√° kh·ª©**:\n" +
               "   ‚Ä¢ Thu nh·∫≠p v√† chi ti√™u 6-12 th√°ng g·∫ßn ƒë√¢y\n" +
               "   ‚Ä¢ Xu h∆∞·ªõng tƒÉng/gi·∫£m\n" +
               "   ‚Ä¢ M√πa v·ª• v√† chu k·ª≥\n\n" +
               "2. **D·ª± b√°o thu nh·∫≠p**:\n" +
               "   ‚Ä¢ L∆∞∆°ng c∆° b·∫£n v√† th∆∞·ªüng\n" +
               "   ‚Ä¢ Thu nh·∫≠p t·ª´ ƒë·∫ßu t∆∞\n" +
               "   ‚Ä¢ Thu nh·∫≠p ph·ª• d·ª± ki·∫øn\n\n" +
               "3. **D·ª± b√°o chi ti√™u**:\n" +
               "   ‚Ä¢ Chi ti√™u c·ªë ƒë·ªãnh h√†ng th√°ng\n" +
               "   ‚Ä¢ Chi ti√™u bi·∫øn ƒë·ªông\n" +
               "   ‚Ä¢ Chi ti√™u d·ª± ki·∫øn (du l·ªãch, mua s·∫Øm)\n\n" +
               "**L·ªùi khuy√™n**: H√£y y√™u c·∫ßu 't·∫°o b√°o c√°o d·ª± b√°o t√†i ch√≠nh' ƒë·ªÉ xem chi ti·∫øt!";
    }

    private String provideGeneralFinancialAnalysis() {
        return "**PH√ÇN T√çCH T√ÄI CH√çNH T·ªîNG QU√ÅT**\n\n" +
                               "**C√°c kh√≠a c·∫°nh c·∫ßn ph√¢n t√≠ch**:\n" +
               "1. **Thu nh·∫≠p**:\n" +
               "   ‚Ä¢ Ngu·ªìn thu nh·∫≠p ch√≠nh v√† ph·ª•\n" +
               "   ‚Ä¢ Xu h∆∞·ªõng tƒÉng tr∆∞·ªüng\n" +
               "   ‚Ä¢ Ti·ªÅm nƒÉng ph√°t tri·ªÉn\n\n" +
               "2. **Chi ti√™u**:\n" +
               "   ‚Ä¢ Ph√¢n lo·∫°i chi ti√™u\n" +
               "   ‚Ä¢ T·ª∑ l·ªá chi ti√™u so v·ªõi thu nh·∫≠p\n" +
               "   ‚Ä¢ C∆° h·ªôi ti·∫øt ki·ªám\n\n" +
               "3. **T√†i s·∫£n v√† n·ª£**:\n" +
               "   ‚Ä¢ T·ªïng t√†i s·∫£n hi·ªán c√≥\n" +
               "   ‚Ä¢ N·ª£ ph·∫£i tr·∫£\n" +
               "   ‚Ä¢ T·ª∑ l·ªá n·ª£/t√†i s·∫£n\n\n" +
               "**L·ªùi khuy√™n**: H√£y y√™u c·∫ßu c·ª• th·ªÉ:\n" +
               "‚Ä¢ 'Ph√¢n t√≠ch chi ti√™u c·ªßa t√¥i'\n" +
               "‚Ä¢ 'ƒê√°nh gi√° thu nh·∫≠p hi·ªán t·∫°i'\n" +
               "‚Ä¢ 'T∆∞ v·∫•n ƒë·∫ßu t∆∞ c∆° b·∫£n'\n" +
               "‚Ä¢ 'L·ªùi khuy√™n ti·∫øt ki·ªám'";
    }

    private String determineReportType(String message) {
        if (message.contains("t·ªïng h·ª£p") || message.contains("summary")) {
            return "summary";
        } else if (message.contains("giao d·ªãch") || message.contains("transaction")) {
            return "transactions";
        } else if (message.contains("ng√¢n s√°ch") || message.contains("budget")) {
            return "budgets";
        } else {
            // M·∫∑c ƒë·ªãnh l√† b√°o c√°o t·ªïng h·ª£p
            return "summary";
        }
    }

    private Map<String, Object> extractReportParams(String message) {
        Map<String, Object> params = new HashMap<>();

        // M·∫∑c ƒë·ªãnh
        params.put("dateFrom", null);
        params.put("dateTo", null);
        params.put("month", null);
        params.put("year", null);

        // X·ª≠ l√Ω th·ªùi gian
        if (message.contains("th√°ng n√†y") || message.contains("this month")) {
            LocalDate now = LocalDate.now();
            params.put("month", now.getMonthValue());
            params.put("year", now.getYear());
        } else if (message.contains("th√°ng tr∆∞·ªõc") || message.contains("last month")) {
            LocalDate lastMonth = LocalDate.now().minusMonths(1);
            params.put("month", lastMonth.getMonthValue());
            params.put("year", lastMonth.getYear());
        } else if (message.contains("nƒÉm nay") || message.contains("this year")) {
            params.put("year", LocalDate.now().getYear());
        } else if (message.contains("nƒÉm tr∆∞·ªõc") || message.contains("last year")) {
            params.put("year", LocalDate.now().getYear() - 1);
        }

        // X·ª≠ l√Ω kho·∫£ng th·ªùi gian c·ª• th·ªÉ
        if (message.contains("t·ª´") && message.contains("ƒë·∫øn")) {
            // T√¨m ng√†y t·ª´ v√† ƒë·∫øn trong tin nh·∫Øn
            // ƒê√¢y l√† logic ƒë∆°n gi·∫£n, c√≥ th·ªÉ c·∫£i thi·ªán sau
            String[] parts = message.split("t·ª´|ƒë·∫øn");
            if (parts.length >= 3) {
                String dateFromStr = parts[1].trim();
                String dateToStr = parts[2].trim();

                // Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y (c·∫ßn c·∫£i thi·ªán)
                try {
                    if (dateFromStr.contains("/")) {
                        params.put("dateFrom", dateFromStr);
                    }
                    if (dateToStr.contains("/")) {
                        params.put("dateTo", dateToStr);
                    }
                } catch (Exception e) {
                    // B·ªè qua n·∫øu kh√¥ng parse ƒë∆∞·ª£c
                }
            }
        }

        return params;
    }

    private String classifyMessage(String normalizedMessage) {
        for (Map.Entry<String, List<String>> entry : KEYWORDS.entrySet()) {
            for (String keyword : entry.getValue()) {
                if (normalizedMessage.contains(keyword)) {
                    return entry.getKey();
                }
            }
        }
        return "general";
    }

    private String generateResponse(String category, String normalizedMessage) {
        switch (category) {
            case "saving":
                return "**TI·∫æT KI·ªÜM TH√îNG MINH**\n\n" +
                       "**Nguy√™n t·∫Øc c∆° b·∫£n**:\n" +
                       "‚Ä¢ Ti·∫øt ki·ªám 20% thu nh·∫≠p h√†ng th√°ng\n" +
                       "‚Ä¢ ƒê·∫∑t m·ª•c ti√™u ti·∫øt ki·ªám c·ª• th·ªÉ\n" +
                       "‚Ä¢ S·ª≠ d·ª•ng t√†i kho·∫£n ti·∫øt ki·ªám ri√™ng bi·ªát\n\n" +
                       "**Ph∆∞∆°ng ph√°p hi·ªáu qu·∫£**:\n" +
                       "‚Ä¢ Ti·∫øt ki·ªám t·ª± ƒë·ªông (tr√≠ch l∆∞∆°ng)\n" +
                       "‚Ä¢ Ti·∫øt ki·ªám theo quy t·∫Øc 52 tu·∫ßn\n" +
                       "‚Ä¢ Ti·∫øt ki·ªám theo ph·∫ßn trƒÉm thu nh·∫≠p\n\n" +
                       "**G·ª£i √Ω**: H√£y y√™u c·∫ßu 'ph√¢n t√≠ch chi ti√™u' ƒë·ªÉ t√¨m c∆° h·ªôi ti·∫øt ki·ªám!";

            case "investment":
                return "**ƒê·∫¶U T∆Ø TH√îNG MINH**\n\n" +
                       "**Nguy√™n t·∫Øc c∆° b·∫£n**:\n" +
                       "‚Ä¢ Ch·ªâ ƒë·∫ßu t∆∞ s·ªë ti·ªÅn c√≥ th·ªÉ m·∫•t\n" +
                       "‚Ä¢ ƒêa d·∫°ng h√≥a danh m·ª•c ƒë·∫ßu t∆∞\n" +
                       "‚Ä¢ ƒê·∫ßu t∆∞ d√†i h·∫°n, kh√¥ng ƒë·∫ßu c∆°\n\n" +
                       "**C√°c k√™nh ƒë·∫ßu t∆∞**:\n" +
                       "‚Ä¢ G·ª≠i ti·∫øt ki·ªám ng√¢n h√†ng (an to√†n)\n" +
                       "‚Ä¢ ƒê·∫ßu t∆∞ ch·ª©ng kho√°n (r·ªßi ro trung b√¨nh)\n" +
                       "‚Ä¢ ƒê·∫ßu t∆∞ b·∫•t ƒë·ªông s·∫£n (r·ªßi ro cao)\n" +
                       "‚Ä¢ ƒê·∫ßu t∆∞ v√†ng (b·∫£o v·ªá t√†i s·∫£n)\n\n" +
                       "**G·ª£i √Ω**: H√£y y√™u c·∫ßu 't∆∞ v·∫•n ƒë·∫ßu t∆∞ c∆° b·∫£n' ƒë·ªÉ bi·∫øt th√™m!";

            case "budget":
                return "**QU·∫¢N L√ù NG√ÇN S√ÅCH TH√îNG MINH**\n\n" +
                       "**Nguy√™n t·∫Øc 50/30/20**:\n" +
                       "‚Ä¢ 50% cho nhu c·∫ßu c∆° b·∫£n (ƒÉn, ·ªü, ƒëi l·∫°i)\n" +
                       "‚Ä¢ 30% cho mong mu·ªën c√° nh√¢n (gi·∫£i tr√≠, mua s·∫Øm)\n" +
                       "‚Ä¢ 20% cho ti·∫øt ki·ªám v√† ƒë·∫ßu t∆∞\n\n" +
                       "**C√°ch l·∫≠p ng√¢n s√°ch**:\n" +
                       "‚Ä¢ X√°c ƒë·ªãnh thu nh·∫≠p c·ªë ƒë·ªãnh\n" +
                       "‚Ä¢ Li·ªát k√™ t·∫•t c·∫£ chi ti√™u\n" +
                       "‚Ä¢ Ph√¢n b·ªï theo t·ª∑ l·ªá\n" +
                       "‚Ä¢ Theo d√µi v√† ƒëi·ªÅu ch·ªânh\n\n" +
                       "**G·ª£i √Ω**: H√£y y√™u c·∫ßu 't·∫°o b√°o c√°o ng√¢n s√°ch' ƒë·ªÉ xem chi ti·∫øt!";

            case "debt":
                return "üí≥ **QU·∫¢N L√ù N·ª¢ TH√îNG MINH**\n\n" +
                       "**Nguy√™n t·∫Øc c∆° b·∫£n**:\n" +
                       "‚Ä¢ Kh√¥ng vay ƒë·ªÉ ti√™u x√†i\n" +
                       "‚Ä¢ ∆Øu ti√™n tr·∫£ n·ª£ l√£i cao tr∆∞·ªõc\n" +
                       "‚Ä¢ Duy tr√¨ t·ª∑ l·ªá n·ª£/t√†i s·∫£n d∆∞·ªõi 30%\n\n" +
                       "**Chi·∫øn l∆∞·ª£c tr·∫£ n·ª£**:\n" +
                       "‚Ä¢ Ph∆∞∆°ng ph√°p Snowball (n·ª£ nh·ªè tr∆∞·ªõc)\n" +
                       "‚Ä¢ Ph∆∞∆°ng ph√°p Avalanche (l√£i cao tr∆∞·ªõc)\n" +
                       "‚Ä¢ TƒÉng thu nh·∫≠p ƒë·ªÉ tr·∫£ n·ª£ nhanh h∆°n\n\n" +
                       "**G·ª£i c√¢u**: H√£y y√™u c·∫ßu 'ph√¢n t√≠ch t√†i ch√≠nh' ƒë·ªÉ ƒë√°nh gi√° t√¨nh h√¨nh n·ª£!";

            case "income":
                return "üíµ **TƒÇNG THU NH·∫¨P TH√îNG MINH**\n\n" +
                       "**Ph√°t tri·ªÉn k·ªπ nƒÉng**:\n" +
                       "‚Ä¢ H·ªçc th√™m ch·ª©ng ch·ªâ chuy√™n m√¥n\n" +
                       "‚Ä¢ Tham gia kh√≥a h·ªçc online\n" +
                       "‚Ä¢ ƒê·ªçc s√°ch v·ªÅ lƒ©nh v·ª±c chuy√™n m√¥n\n\n" +
                       "**T·∫°o ngu·ªìn thu nh·∫≠p ph·ª•**:\n" +
                       "‚Ä¢ Freelance online\n" +
                       "‚Ä¢ B√°n h√†ng online\n" +
                       "‚Ä¢ ƒê·∫ßu t∆∞ ch·ª©ng kho√°n\n" +
                       "‚Ä¢ Cho thu√™ t√†i s·∫£n\n\n" +
                       "**G·ª£i √Ω**: H√£y y√™u c·∫ßu 'ph√¢n t√≠ch thu nh·∫≠p' ƒë·ªÉ xem c∆° h·ªôi tƒÉng tr∆∞·ªüng!";

            case "expense":
                return "üí∏ **KI·ªÇM SO√ÅT CHI TI√äU TH√îNG MINH**\n\n" +
                       "**Ph√¢n lo·∫°i chi ti√™u**:\n" +
                       "‚Ä¢ Chi ti√™u c·∫ßn thi·∫øt (ƒÉn u·ªëng, ƒëi l·∫°i, nh√† ·ªü)\n" +
                       "‚Ä¢ Chi ti√™u mong mu·ªën (gi·∫£i tr√≠, mua s·∫Øm)\n" +
                       "‚Ä¢ Chi ti√™u ƒë·∫ßu t∆∞ (h·ªçc t·∫≠p, ph√°t tri·ªÉn b·∫£n th√¢n)\n\n" +
                       "**C√°ch ti·∫øt ki·ªám**:\n" +
                       "‚Ä¢ Mua s·∫Øm th√¥ng minh\n" +
                       "‚Ä¢ S·ª≠ d·ª•ng m√£ gi·∫£m gi√°\n" +
                       "‚Ä¢ So s√°nh gi√° tr∆∞·ªõc khi mua\n" +
                       "‚Ä¢ Tr√°nh mua s·∫Øm b·ªëc ƒë·ªìng\n\n" +
                       "**G·ª£i √Ω**: H√£y y√™u c·∫ßu 'ph√¢n t√≠ch chi ti√™u' ƒë·ªÉ xem chi ti·∫øt!";

            case "report":
                return "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o c√°c lo·∫°i b√°o c√°o t√†i ch√≠nh:\n\n" +
                       "**B√°o c√°o t·ªïng h·ª£p**:\n" +
                       "‚Ä¢ 'T·∫°o b√°o c√°o t·ªïng h·ª£p th√°ng n√†y'\n" +
                       "‚Ä¢ 'B√°o c√°o t·ªïng h·ª£p t·ª´ 01/01 ƒë·∫øn 31/01'\n\n" +
                       "**B√°o c√°o giao d·ªãch**:\n" +
                       "‚Ä¢ 'B√°o c√°o giao d·ªãch th√°ng n√†y'\n" +
                       "‚Ä¢ 'B√°o c√°o giao d·ªãch t·ª´ 01/01 ƒë·∫øn 31/01'\n\n" +
                       "**B√°o c√°o ng√¢n s√°ch**:\n" +
                       "‚Ä¢ 'B√°o c√°o ng√¢n s√°ch th√°ng 12'\n" +
                       "‚Ä¢ 'B√°o c√°o ng√¢n s√°ch th√°ng 12 nƒÉm 2024'\n\n" +
                       "**Xu·∫•t file**:\n" +
                       "‚Ä¢ 'Xu·∫•t b√°o c√°o Excel th√°ng n√†y'\n" +
                       "‚Ä¢ 'Xu·∫•t b√°o c√°o PDF th√°ng n√†y'\n\n" +
                       "H√£y cho t√¥i bi·∫øt b·∫°n mu·ªën lo·∫°i b√°o c√°o n√†o!";

            case "analysis":
                return "**PH√ÇN T√çCH T√ÄI CH√çNH TH√îNG MINH**\n\n" +
                       "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ph√¢n t√≠ch:\n\n" +
                       "**Chi ti√™u**:\n" +
                       "‚Ä¢ 'Ph√¢n t√≠ch chi ti√™u c·ªßa t√¥i'\n" +
                       "‚Ä¢ 'ƒê√°nh gi√° xu h∆∞·ªõng chi ti√™u'\n" +
                       "‚Ä¢ 'T√¨m c∆° h·ªôi ti·∫øt ki·ªám'\n\n" +
                       "**Thu nh·∫≠p**:\n" +
                       "‚Ä¢ 'Ph√¢n t√≠ch thu nh·∫≠p hi·ªán t·∫°i'\n" +
                       "‚Ä¢ 'ƒê√°nh gi√° ti·ªÅm nƒÉng tƒÉng tr∆∞·ªüng'\n" +
                       "‚Ä¢ 'So s√°nh thu nh·∫≠p theo th·ªùi gian'\n\n" +
                       "**Ng√¢n s√°ch**:\n" +
                       "‚Ä¢ 'Ph√¢n t√≠ch ng√¢n s√°ch h√†ng th√°ng'\n" +
                       "‚Ä¢ 'ƒê√°nh gi√° hi·ªáu qu·∫£ ng√¢n s√°ch'\n" +
                       "‚Ä¢ 'D·ª± b√°o ng√¢n s√°ch t∆∞∆°ng lai'\n\n" +
                       "H√£y cho t√¥i bi·∫øt b·∫°n mu·ªën ph√¢n t√≠ch kh√≠a c·∫°nh n√†o!";

            case "advice":
                return "**T∆Ø V·∫§N T√ÄI CH√çNH TH√îNG MINH**\n\n" +
                       "T√¥i c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ:\n\n" +
                       "**Ti·∫øt ki·ªám**:\n" +
                       "‚Ä¢ 'T∆∞ v·∫•n ti·∫øt ki·ªám hi·ªáu qu·∫£'\n" +
                       "‚Ä¢ 'L·ªùi khuy√™n ti·∫øt ki·ªám cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu'\n" +
                       "‚Ä¢ 'C√°ch ti·∫øt ki·ªám cho m·ª•c ti√™u c·ª• th·ªÉ'\n\n" +
                       "**ƒê·∫ßu t∆∞**:\n" +
                       "‚Ä¢ 'T∆∞ v·∫•n ƒë·∫ßu t∆∞ c∆° b·∫£n'\n" +
                       "‚Ä¢ 'L·ªùi khuy√™n ƒë·∫ßu t∆∞ an to√†n'\n" +
                       "‚Ä¢ 'C√°ch ƒë·∫ßu t∆∞ cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu'\n\n" +
                       "**Qu·∫£n l√Ω t√†i ch√≠nh**:\n" +
                       "‚Ä¢ 'T∆∞ v·∫•n qu·∫£n l√Ω ng√¢n s√°ch'\n" +
                       "‚Ä¢ 'L·ªùi khuy√™n qu·∫£n l√Ω n·ª£'\n" +
                       "‚Ä¢ 'C√°ch l·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh'\n\n" +
                       "H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn t∆∞ v·∫•n v·ªÅ v·∫•n ƒë·ªÅ g√¨!";

            case "thanks":
                return getRandomResponse(Arrays.asList(
                   "R·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n! N·∫øu c√≥ th√™m c√¢u h·ªèi g√¨ v·ªÅ t√†i ch√≠nh, ƒë·ª´ng ng·∫°i h·ªèi nh√©! üòä",
                   "C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng! T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªÅ c√°c v·∫•n ƒë·ªÅ t√†i ch√≠nh.",
                   "Kh√¥ng c√≥ g√¨! Ch√∫c b·∫°n qu·∫£n l√Ω t√†i ch√≠nh th·∫≠t t·ªët. H·∫πn g·∫∑p l·∫°i!"
                ));

            case "help":
                  return "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c ch·ªß ƒë·ªÅ sau:\n\n" +
                         "**üÜï PH√ÇN T√çCH D·ªÆ LI·ªÜU TH·ª∞C T·∫æ**:\n" +
                         "‚Ä¢ 'Ph√¢n t√≠ch th·ª±c t·∫ø' - Ph√¢n t√≠ch d·ª±a tr√™n d·ªØ li·ªáu c·ªßa b·∫°n\n" +
                         "‚Ä¢ 'T√¨nh h√¨nh hi·ªán t·∫°i' - ƒê√°nh gi√° t√†i ch√≠nh hi·ªán t·∫°i\n" +
                         "‚Ä¢ 'D·ªØ li·ªáu c·ªßa t√¥i' - Xem ph√¢n t√≠ch c√° nh√¢n\n\n" +
                       "**Qu·∫£n l√Ω t√†i ch√≠nh**:\n" +
                       "‚Ä¢ Ti·∫øt ki·ªám v√† ƒë·∫ßu t∆∞ th√¥ng minh\n" +
                       "‚Ä¢ Qu·∫£n l√Ω ng√¢n s√°ch v√† chi ti√™u hi·ªáu qu·∫£\n" +
                       "‚Ä¢ X·ª≠ l√Ω n·ª£ v√† vay an to√†n\n" +
                       "‚Ä¢ TƒÉng thu nh·∫≠p b·ªÅn v·ªØng\n\n" +
                       "**B√°o c√°o v√† ph√¢n t√≠ch**:\n" +
                       "‚Ä¢ B√°o c√°o t·ªïng h·ª£p t√†i ch√≠nh\n" +
                       "‚Ä¢ B√°o c√°o giao d·ªãch v√† ng√¢n s√°ch\n" +
                       "‚Ä¢ Ph√¢n t√≠ch chi ti√™u v√† thu nh·∫≠p th√¥ng minh\n" +
                       "‚Ä¢ D·ª± b√°o t√†i ch√≠nh t∆∞∆°ng lai\n\n" +
                       "**Ph√¢n t√≠ch n√¢ng cao**:\n" +
                       "‚Ä¢ Ph√¢n t√≠ch xu h∆∞·ªõng chi ti√™u\n" +
                       "‚Ä¢ ƒê√°nh gi√° hi·ªáu qu·∫£ ng√¢n s√°ch\n" +
                       "‚Ä¢ So s√°nh thu nh·∫≠p theo th·ªùi gian\n" +
                       "‚Ä¢ T√¨m c∆° h·ªôi ti·∫øt ki·ªám v√† ƒë·∫ßu t∆∞\n\n" +
                       "**T∆∞ v·∫•n th√¥ng minh**:\n" +
                       "‚Ä¢ Chi·∫øn l∆∞·ª£c ti·∫øt ki·ªám hi·ªáu qu·∫£\n" +
                       "‚Ä¢ K·∫ø ho·∫°ch ƒë·∫ßu t∆∞ an to√†n\n" +
                       "‚Ä¢ Qu·∫£n l√Ω r·ªßi ro t√†i ch√≠nh\n" +
                       "‚Ä¢ L·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh d√†i h·∫°n\n\n" +
                       "**üìÑ Xu·∫•t file ƒëa d·∫°ng**:\n" +
                       "‚Ä¢ Xu·∫•t b√°o c√°o Excel (.xlsx)\n" +
                       "‚Ä¢ Xu·∫•t b√°o c√°o PDF (.pdf)\n" +
                       "‚Ä¢ T·∫£i v·ªÅ file text (.txt)\n" +
                       "‚Ä¢ In b√°o c√°o tr·ª±c ti·∫øp\n\n" +
                       "**V√≠ d·ª• s·ª≠ d·ª•ng**:\n" +
                       "‚Ä¢ 'Ph√¢n t√≠ch chi ti√™u c·ªßa t√¥i'\n" +
                       "‚Ä¢ 'T∆∞ v·∫•n ƒë·∫ßu t∆∞ c∆° b·∫£n'\n" +
                       "‚Ä¢ 'T·∫°o b√°o c√°o Excel th√°ng n√†y'\n" +
                       "‚Ä¢ 'L·ªùi khuy√™n ti·∫øt ki·ªám hi·ªáu qu·∫£'\n\n" +
                       "H√£y h·ªèi b·∫•t k·ª≥ ƒëi·ªÅu g√¨ b·∫°n quan t√¢m!";

            default:
                  return "T√¥i hi·ªÉu b·∫°n ƒëang t√¨m ki·∫øm th√¥ng tin t√†i ch√≠nh. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n\n" +
                         "**üÜï Ph√¢n t√≠ch d·ªØ li·ªáu th·ª±c t·∫ø**:\n" +
                         "‚Ä¢ 'Ph√¢n t√≠ch th·ª±c t·∫ø' - D·ª±a tr√™n d·ªØ li·ªáu c·ªßa b·∫°n\n" +
                         "‚Ä¢ 'T√¨nh h√¨nh hi·ªán t·∫°i' - ƒê√°nh gi√° t√†i ch√≠nh hi·ªán t·∫°i\n\n" +
                       "‚Ä¢ Ti·∫øt ki·ªám v√† ƒë·∫ßu t∆∞\n" +
                       "‚Ä¢ Qu·∫£n l√Ω ng√¢n s√°ch\n" +
                       "‚Ä¢ X·ª≠ l√Ω n·ª£ v√† vay\n" +
                       "‚Ä¢ TƒÉng thu nh·∫≠p\n" +
                       "‚Ä¢ T·∫°o b√°o c√°o t√†i ch√≠nh\n" +
                       "‚Ä¢ Ph√¢n t√≠ch t√†i ch√≠nh\n" +
                       "‚Ä¢ T∆∞ v·∫•n t√†i ch√≠nh\n" +
                       "‚Ä¢ Xu·∫•t file Excel/PDF\n\n" +
                       "Ho·∫∑c g√µ 'gi√∫p' ƒë·ªÉ xem t·∫•t c·∫£ c√°c ch·ªß ƒë·ªÅ t√¥i c√≥ th·ªÉ h·ªó tr·ª£!";
        }
    }

    private String getRandomResponse(List<String> responses) {
        Random random = new Random();
        return responses.get(random.nextInt(responses.size()));
    }
}
