package com.example.finance.controller;

import com.example.finance.dto.AIChatRequest;
import com.example.finance.dto.AIChatResponse;
import com.example.finance.service.AIFinanceService;
import com.example.finance.service.ReportService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

@RestController
@RequestMapping("/api/ai")
@Slf4j
@CrossOrigin(origins = "*")
public class AIChatController {

    @Autowired
    private AIFinanceService aiFinanceService;

    @Autowired
    private ReportService reportService;

    @PostMapping("/chat")
    public AIChatResponse chat(@RequestBody AIChatRequest request) {
        try {
            log.info("Received AI chat request: {}", request.getMessage());
            
            String answer = aiFinanceService.processMessage(request.getMessage());
            
            AIChatResponse resp = new AIChatResponse();
            resp.setAnswer(answer);
            return resp;
        } catch (Exception e) {
            log.error("Error in AI chat", e);
            AIChatResponse resp = new AIChatResponse();
            resp.setAnswer("Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.");
            return resp;
        }
    }

    @PostMapping("/export-report")
    public ResponseEntity<String> exportReport(@RequestBody AIChatRequest request) {
        try {
            log.info("=== EXPORT REPORT ENDPOINT CALLED ===");
            log.info("Received export report request: {}", request.getMessage());
            
            // T·∫°m th·ªùi s·ª≠ d·ª•ng username m·∫∑c ƒë·ªãnh, trong th·ª±c t·∫ø s·∫Ω l·∫•y t·ª´ JWT token
            String username = "admin"; // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
            log.info("Using username: {}", username);
            
            Long userId = reportService.getUserIdByUsername(username);
            log.info("Found userId: {}", userId);
            
            // Ph√¢n t√≠ch y√™u c·∫ßu xu·∫•t b√°o c√°o
            String reportType = determineReportType(request.getMessage());
            String format = determineExportFormat(request.getMessage());
            log.info("Report type: {}, Format: {}", reportType, format);
            
            // T·∫°o b√°o c√°o
            String reportContent = reportService.generateTextReport(
                userId,
                reportType,
                null, // dateFrom
                null, // dateTo
                null, // month
                null  // year
            );
            log.info("Report generated successfully, length: {}", reportContent.length());
            
                                    // ƒê·ªãnh d·∫°ng response
                        String response = "üìä **B√ÅO C√ÅO ƒê√É ƒê∆Ø·ª¢C T·∫†O**\n\n" +
                                        "**Lo·∫°i b√°o c√°o**: " + getReportTypeName(reportType) + "\n" +
                                        "**ƒê·ªãnh d·∫°ng**: " + getFormatName(format) + "\n\n" +
                                        "**N·ªôi dung b√°o c√°o**:\n" +
                                        "```\n" + reportContent + "\n```\n\n" +
                                        "üí° **L∆∞u √Ω**: B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o trong AI Chat.\n\n" +
                                        "üìÑ **H∆Ø·ªöNG D·∫™N XU·∫§T FILE**:\n" +
                                        "**Excel (.xlsx)**:\n" +
                                        "1. Copy to√†n b·ªô n·ªôi dung b√°o c√°o\n" +
                                        "2. M·ªü Microsoft Excel\n" +
                                        "3. Paste v√†o √¥ A1\n" +
                                        "4. Ch·ªçn File ‚Üí Save As ‚Üí Excel Workbook (.xlsx)\n\n" +
                                        "**PDF (.pdf)**:\n" +
                                        "1. Copy to√†n b·ªô n·ªôi dung b√°o c√°o\n" +
                                        "2. M·ªü Microsoft Word\n" +
                                        "3. Paste v√†o trang m·ªõi\n" +
                                        "4. Ch·ªçn File ‚Üí Save As ‚Üí PDF (.pdf)\n\n" +
                                        "**Text (.txt)**:\n" +
                                        "‚Ä¢ S·ª≠ d·ª•ng n√∫t 'T·∫£i v·ªÅ (.txt)' b√™n d∆∞·ªõi\n" +
                                        "‚Ä¢ Ho·∫∑c copy v√† paste v√†o Notepad\n\n" +
                                        "üîß **T√≠nh nƒÉng n√¢ng cao**:\n" +
                                        "‚Ä¢ Copy b√°o c√°o: S·ª≠ d·ª•ng n√∫t 'Copy b√°o c√°o'\n" +
                                        "‚Ä¢ In b√°o c√°o: S·ª≠ d·ª•ng n√∫t 'In b√°o c√°o'\n" +
                                        "‚Ä¢ T·∫£i v·ªÅ: S·ª≠ d·ª•ng n√∫t 'T·∫£i v·ªÅ (.txt)'";
            
            log.info("=== EXPORT REPORT SUCCESS ===");
            return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_PLAIN_VALUE + "; charset=UTF-8")
                .body(response);
            
        } catch (Exception e) {
            log.error("=== EXPORT REPORT ERROR ===", e);
            return ResponseEntity.badRequest()
                .body("‚ùå Xin l·ªói, t√¥i kh√¥ng th·ªÉ xu·∫•t b√°o c√°o l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.\n\n" +
                      "Chi ti·∫øt l·ªói: " + e.getMessage());
        }
    }

    // Test endpoint ƒë·ªÉ ki·ªÉm tra controller c√≥ ho·∫°t ƒë·ªông kh√¥ng
    @GetMapping("/test")
    public ResponseEntity<String> test() {
        log.info("Test endpoint called");
        return ResponseEntity.ok("AIChatController is working!");
    }

    private String determineReportType(String message) {
        String lowerMessage = message.toLowerCase();
        if (lowerMessage.contains("t·ªïng h·ª£p") || lowerMessage.contains("summary")) {
            return "summary";
        } else if (lowerMessage.contains("giao d·ªãch") || lowerMessage.contains("transaction")) {
            return "transactions";
        } else if (lowerMessage.contains("ng√¢n s√°ch") || lowerMessage.contains("budget")) {
            return "budgets";
        } else {
            return "summary"; // M·∫∑c ƒë·ªãnh
        }
    }

    private String determineExportFormat(String message) {
        String lowerMessage = message.toLowerCase();
        if (lowerMessage.contains("excel") || lowerMessage.contains("xlsx")) {
            return "excel";
        } else if (lowerMessage.contains("pdf")) {
            return "pdf";
        } else {
            return "text"; // M·∫∑c ƒë·ªãnh
        }
    }

    private String getReportTypeName(String reportType) {
        switch (reportType) {
            case "summary": return "B√°o c√°o t·ªïng h·ª£p";
            case "transactions": return "B√°o c√°o giao d·ªãch";
            case "budgets": return "B√°o c√°o ng√¢n s√°ch";
            default: return "B√°o c√°o t·ªïng h·ª£p";
        }
    }

    private String getFormatName(String format) {
        switch (format) {
            case "excel": return "Excel (.xlsx)";
            case "pdf": return "PDF (.pdf)";
            case "text": return "VƒÉn b·∫£n";
            default: return "VƒÉn b·∫£n";
        }
    }
}
