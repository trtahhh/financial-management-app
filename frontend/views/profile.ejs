<main class="container py-4">
  <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center mb-4">
    <h2 class="mb-0">
      <i class="fas fa-user me-2 text-success"></i>
      Hồ sơ cá nhân
    </h2>
    <div class="btn-toolbar">
      <button id="editBtn" class="btn btn-sm btn-primary" onclick="toggleEditMode()">
        <i class="fas fa-edit me-1"></i>Chỉnh sửa thông tin
      </button>
      <button id="saveBtn" class="btn btn-sm btn-success me-2" onclick="saveProfile()" style="display: none;">
        <i class="fas fa-save me-1"></i>Lưu
      </button>
      <button id="cancelBtn" class="btn btn-sm btn-outline-secondary" onclick="cancelEdit()" style="display: none;">
        <i class="fas fa-times me-1"></i>Thoát
      </button>
    </div>
  </div>

  <div class="row">
    <!-- Profile Info Card -->
    <div class="col-md-4">
      <!-- Avatar Card -->
      <div class="card profile-card mb-4">
        <div class="profile-header text-center">
          <div class="avatar-container">
            <img id="profileImage" src="https://via.placeholder.com/150/198754/ffffff?text=User" 
                 class="rounded-circle border border-3 border-white" width="150" height="150" alt="Avatar"
                 onclick="showAvatarMenu()" style="cursor: pointer;">
            <input type="file" id="avatarInput" accept="image/*" style="display: none;" onchange="previewAndUploadAvatar(this)">
            <button class="btn btn-light avatar-upload-btn" onclick="document.getElementById('avatarInput').click()" title="Thay đổi ảnh đại diện">
              <i class="fas fa-camera text-success"></i>
            </button>
          </div>
          
          <h4 class="text-white fw-bold mt-3 mb-1" id="profileNameDisplay">Tên người dùng</h4>
          <p class="mb-1" id="profileRole">USER</p>
          <p class="mb-0 text-white-50" id="profileEmailDisplay">email@example.com</p>
        </div>
      </div>
      
      <!-- Quick Stats -->
      <div class="card profile-card">
        <div class="card-header bg-white">
          <h5 class="mb-0 text-success">
            <i class="fas fa-chart-bar me-2"></i>
            Thống kê nhanh
          </h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-6">
              <div class="stat-card">
                <i class="fas fa-wallet text-success mb-2" style="font-size: 1.5rem;"></i>
                <h6 class="text-success mb-1" id="totalWallets">0</h6>
                <small class="text-muted">Ví tiền</small>
              </div>
            </div>
            <div class="col-6">
              <div class="stat-card">
                <i class="fas fa-bullseye text-info mb-2" style="font-size: 1.5rem;"></i>
                <h6 class="text-info mb-1" id="totalGoals">0</h6>
                <small class="text-muted">Mục tiêu</small>
              </div>
            </div>
            <div class="col-6">
              <div class="stat-card">
                <i class="fas fa-exchange-alt text-warning mb-2" style="font-size: 1.5rem;"></i>
                <h6 class="text-warning mb-1" id="totalTransactions">0</h6>
                <small class="text-muted">Giao dịch</small>
              </div>
            </div>
            <div class="col-6">
              <div class="stat-card">
                <i class="fas fa-calculator text-danger mb-2" style="font-size: 1.5rem;"></i>
                <h6 class="text-danger mb-1" id="totalBudgets">0</h6>
                <small class="text-muted">Ngân sách</small>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Profile Details -->
    <div class="col-md-8">
      <div class="card profile-card">
        <div class="card-header bg-white">
          <h5 class="mb-0 text-success">
            <i class="fas fa-edit me-2"></i>
            Thông tin chi tiết
          </h5>
        </div>
        <div class="card-body p-4">
          <form id="profileForm">
            <div class="row">
              <!-- Personal Info -->
              <div class="col-md-6">
                <h6 class="text-success mb-3 fw-bold">
                  <i class="fas fa-user me-2"></i>
                  Thông tin cá nhân
                </h6>
                
                <div class="mb-3">
                  <label class="form-label fw-medium">Họ và tên:</label>
                  <input type="text" id="fullName" class="form-control editable-field" placeholder="Nhập họ và tên đầy đủ">
                </div>
                
                <div class="mb-3">
                  <label class="form-label fw-medium">Ngày sinh:</label>
                  <input type="date" id="birthday" class="form-control editable-field">
                </div>
                
                <div class="mb-3">
                  <label class="form-label fw-medium">Giới tính:</label>
                  <select id="gender" class="form-select editable-field">
                    <option value="">Chọn giới tính</option>
                    <option value="Nam">Nam</option>
                    <option value="Nữ">Nữ</option>
                    <option value="Khác">Khác</option>
                  </select>
                </div>
                
                <div class="mb-3">
                  <label class="form-label fw-medium">Số điện thoại:</label>
                  <input type="tel" id="phone" class="form-control editable-field" placeholder="Nhập số điện thoại">
                </div>
              </div>
              
              <!-- Account Info -->
              <div class="col-md-6">
                <h6 class="text-success mb-3 fw-bold">
                  <i class="fas fa-shield-alt me-2"></i>
                  Thông tin tài khoản
                </h6>
                
                <div class="mb-3">
                  <label class="form-label fw-medium">Tên đăng nhập:</label>
                  <input type="text" id="username" class="form-control" readonly style="background-color: #f8f9fa;">
                </div>
                
                <div class="mb-3">
                  <label class="form-label fw-medium">Email:</label>
                  <input type="email" id="email" class="form-control editable-field" placeholder="Nhập địa chỉ email">
                </div>
                
                <div class="mb-3">
                  <label class="form-label fw-medium">Vai trò:</label>
                  <input type="text" id="role" class="form-control" readonly style="background-color: #f8f9fa;">
                </div>
                
                <div class="mb-3">
                  <label class="form-label fw-medium">Ngày tạo tài khoản:</label>
                  <input type="text" id="createdAt" class="form-control" readonly style="background-color: #f8f9fa;">
                </div>
              </div>
            </div>
            
            <div class="mb-4">
              <label class="form-label fw-medium">Địa chỉ:</label>
              <textarea id="address" class="form-control editable-field" rows="3" placeholder="Nhập địa chỉ chi tiết của bạn"></textarea>
            </div>
            
            <div class="text-end">
              <button id="saveFormBtn" type="button" class="btn btn-success px-4" onclick="saveProfile()" style="display: none;">
                <i class="fas fa-save me-2"></i>Lưu
              </button>
            </div>
          </form>
        </div>
      </div>
      
      <!-- Activity History -->
      <div class="card profile-card mt-4">
        <div class="card-header bg-white">
          <h5 class="mb-0 text-success">
            <i class="fas fa-history me-2"></i>
            Hoạt động gần đây
          </h5>
        </div>
        <div class="card-body">
          <div id="activityList">
            <div class="text-center text-muted py-4">
              <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
              <p>Đang tải hoạt động...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<!-- Avatar Menu -->
<div id="avatarMenu" class="avatar-menu">
  <div class="avatar-menu-item" onclick="viewAvatar()">
    <i class="fas fa-eye text-primary"></i>Xem ảnh
  </div>
  <div class="avatar-menu-item" onclick="changeAvatar()">
    <i class="fas fa-camera text-success"></i>Thay ảnh mới
  </div>
</div>

<!-- Avatar Modal -->
<div class="modal fade" id="avatarModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Ảnh đại diện</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body text-center">
        <img id="modalAvatarImage" src="" class="img-fluid rounded" style="max-height: 400px;">
      </div>
    </div>
  </div>
</div>

<style>
  .profile-card {
    border: none;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    background: white;
  }
  
  .avatar-container {
    position: relative;
    display: inline-block;
  }
  
  .avatar-upload-btn {
    position: absolute;
    bottom: 5px;
    right: 5px;
    width: 35px;
    height: 35px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    border: 2px solid white;
  }
  
  .editable-field:focus {
    border-color: #198754 !important;
    box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25) !important;
    background-color: #fff !important;
  }
  
  .stat-card {
    text-align: center;
    padding: 20px;
    margin: 5px 0;
    border-radius: 12px;
    background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);
    border: 1px solid #e9ecef;
    transition: transform 0.2s ease;
  }
  
  .stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }
  
  .activity-item {
    padding: 20px;
    border-left: 4px solid #198754;
    background: white;
    margin-bottom: 15px;
    border-radius: 0 12px 12px 0;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    transition: transform 0.2s ease;
  }
  
  .activity-item:hover {
    transform: translateX(5px);
  }
  
  .profile-header {
    background: linear-gradient(135deg, #198754 0%, #20c997 100%);
    color: white;
    border-radius: 15px 15px 0 0;
    padding: 30px;
  }
  
  .save-indicator {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1050;
  }
  
  .avatar-menu {
    position: fixed;
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.15);
    z-index: 1060;
    min-width: 150px;
    display: none;
  }
  
  .avatar-menu-item {
    padding: 12px 16px;
    cursor: pointer;
    border-bottom: 1px solid #f0f0f0;
    transition: background-color 0.2s;
  }
  
  .avatar-menu-item:hover {
    background-color: #f8f9fa;
  }
  
  .avatar-menu-item:last-child {
    border-bottom: none;
  }
  
  .avatar-menu-item i {
    margin-right: 8px;
    width: 16px;
  }
</style>

<script src="/js/auth-utils.js"></script>
<script>
  let originalProfileData = {};
  let isEditMode = false;
  let pendingChanges = false;

  // Load profile when page loads
  document.addEventListener('DOMContentLoaded', function() {
    loadProfile();
    loadQuickStats();
    loadActivityHistory();
    
    // Set fields to readonly initially
    setFieldsReadonly(true);
    
    // Update breadcrumb
    document.getElementById('currentPage').textContent = 'Hồ sơ cá nhân';
    
    // Auto-save on page unload
    window.addEventListener('beforeunload', function(e) {
      if (isEditMode && pendingChanges) {
        // Auto save silently before leaving
        autoSaveProfile();
      }
    });
    
    // Hide avatar menu when clicking outside
    document.addEventListener('click', function(e) {
      const menu = document.getElementById('avatarMenu');
      const avatar = document.getElementById('profileImage');
      if (menu && !menu.contains(e.target) && e.target !== avatar) {
        menu.style.display = 'none';
      }
    });
    
    // Track changes
    setupChangeTracking();
  });

  function setupChangeTracking() {
    const editableFields = document.querySelectorAll('.editable-field');
    editableFields.forEach(field => {
      field.addEventListener('input', function() {
        if (isEditMode) {
          pendingChanges = true;
          // Update display in real-time when in edit mode
          if (field.id === 'fullName' || field.id === 'email') {
            updateDisplayFields();
          }
        }
      });
    });
  }

  function showAvatarMenu() {
    const menu = document.getElementById('avatarMenu');
    const avatar = document.getElementById('profileImage');
    const rect = avatar.getBoundingClientRect();
    
    menu.style.display = 'block';
    menu.style.left = (rect.left + rect.width + 10) + 'px';
    menu.style.top = rect.top + 'px';
  }

  function viewAvatar() {
    const avatarSrc = document.getElementById('profileImage').src;
    document.getElementById('modalAvatarImage').src = avatarSrc;
    
    const modal = new bootstrap.Modal(document.getElementById('avatarModal'));
    modal.show();
    
    document.getElementById('avatarMenu').style.display = 'none';
  }

  function changeAvatar() {
    document.getElementById('avatarInput').click();
    document.getElementById('avatarMenu').style.display = 'none';
  }

  function setFieldsReadonly(readonly) {
    const editableFields = document.querySelectorAll('.editable-field');
    editableFields.forEach(field => {
      field.readOnly = readonly;
      if (readonly) {
        field.style.backgroundColor = '#f8f9fa';
        field.style.border = '1px solid #e9ecef';
      } else {
        field.style.backgroundColor = '#fff';
        field.style.border = '1px solid #ced4da';
      }
    });
  }

  function toggleEditMode() {
    isEditMode = !isEditMode;
    
    if (isEditMode) {
      // Enable editing
      setFieldsReadonly(false);
      
      // Show/hide buttons
      document.getElementById('editBtn').style.display = 'none';
      document.getElementById('saveBtn').style.display = 'inline-block';
      document.getElementById('cancelBtn').style.display = 'inline-block';
      document.getElementById('saveFormBtn').style.display = 'inline-block';
      
      pendingChanges = false;
    } else {
      // Disable editing
      setFieldsReadonly(true);
      
      // Show/hide buttons
      document.getElementById('editBtn').style.display = 'inline-block';
      document.getElementById('saveBtn').style.display = 'none';
      document.getElementById('cancelBtn').style.display = 'none';
      document.getElementById('saveFormBtn').style.display = 'none';
      
      pendingChanges = false;
    }
  }

  function cancelEdit() {
    // Restore original data without confirmation
    document.getElementById('fullName').value = originalProfileData.fullName || '';
    document.getElementById('email').value = originalProfileData.email || '';
    document.getElementById('phone').value = originalProfileData.phone || '';
    document.getElementById('birthday').value = originalProfileData.birthday || '';
    document.getElementById('gender').value = originalProfileData.gender || '';
    document.getElementById('address').value = originalProfileData.address || '';
    
    // Update display fields
    updateDisplayFields();
    
    // Exit edit mode
    isEditMode = false;
    pendingChanges = false;
    toggleEditMode();
  }

  function updateDisplayFields() {
    // Update avatar area display
    document.getElementById('profileNameDisplay').textContent = 
      document.getElementById('fullName').value || originalProfileData.username || 'Tên người dùng';
    document.getElementById('profileEmailDisplay').textContent = 
      document.getElementById('email').value || 'email@example.com';
  }

  async function loadProfile() {
    try {
      const response = await fetch('/api/users/profile', {
        headers: {
          'Authorization': 'Bearer ' + getAuthToken()
        }
      });

      if (response.ok) {
        const data = await response.json();
        console.log('Profile API Response:', data); // Debug log
        
        if (data.success && data.user) {
          const user = data.user;
          const profile = data.profile || {}; // Empty object if no profile
          
          // Combine user and profile data
          const combinedData = {
            ...user,
            ...profile
          };
          
          originalProfileData = { ...combinedData };
          
          // Update all fields
          document.getElementById('profileNameDisplay').textContent = combinedData.fullName || combinedData.username || 'Tên người dùng';
          document.getElementById('profileRole').textContent = combinedData.role || 'USER';
          document.getElementById('profileEmailDisplay').textContent = combinedData.email || 'email@example.com';
          
          document.getElementById('fullName').value = combinedData.fullName || '';
          document.getElementById('username').value = combinedData.username || '';
          document.getElementById('email').value = combinedData.email || '';
          document.getElementById('role').value = combinedData.role || '';
          document.getElementById('phone').value = combinedData.phone || '';
          document.getElementById('birthday').value = combinedData.birthday || '';
          document.getElementById('gender').value = combinedData.gender || '';
          document.getElementById('address').value = combinedData.address || '';
          
          if (combinedData.createdAt) {
            document.getElementById('createdAt').value = new Date(combinedData.createdAt).toLocaleDateString('vi-VN');
          }
          
          // Load profile image if available
          if (combinedData.imageUrl) {
            // Normalize the image URL to handle both old and new formats
            const normalizedUrl = window.authUtils && window.authUtils.normalizeImageUrl ? 
              window.authUtils.normalizeImageUrl(combinedData.imageUrl) : combinedData.imageUrl;
            
            document.getElementById('profileImage').src = normalizedUrl;
            
            // Also update sidebar avatar if exists
            const sidebarAvatar = document.querySelector('#userAvatar');
            if (sidebarAvatar) {
              sidebarAvatar.src = normalizedUrl;
            }
          }
          
          // Update global user info using auth-utils
          if (window.authUtils && window.authUtils.updateGlobalUserInfo) {
            window.authUtils.updateGlobalUserInfo(combinedData);
          }
        } else {
          console.error('Invalid response format:', data);
          showErrorAlert('Dữ liệu profile không hợp lệ');
        }
        
      } else if (response.status === 401) {
        logout();
      }
    } catch (error) {
      console.error('Lỗi tải profile:', error);
      showErrorAlert('Lỗi tải thông tin profile');
    }
  }

  function previewAndUploadAvatar(input) {
    if (input.files && input.files[0]) {
      const file = input.files[0];
      
      // Kiểm tra kích thước file (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        showErrorAlert('File ảnh không được vượt quá 5MB');
        return;
      }
      
      // Preview ảnh
      const reader = new FileReader();
      reader.onload = function(e) {
        document.getElementById('profileImage').src = e.target.result;
      };
      reader.readAsDataURL(file);
      
      // Upload ảnh lên server
      uploadAvatar(file);
    }
  }

  async function uploadAvatar(file) {
    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('/api/files/upload', {
        method: 'POST',
        headers: {
          'Authorization': 'Bearer ' + getAuthToken()
        },
        body: formData
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          // Tự động lưu ảnh vào profile ngay lập tức
          const imageUrl = result.data;
          await saveAvatarToProfile(imageUrl);
        } else {
          showErrorAlert(result.message || 'Lỗi upload ảnh');
          // Restore original image
          if (originalProfileData.imageUrl) {
            document.getElementById('profileImage').src = originalProfileData.imageUrl;
          } else {
            document.getElementById('profileImage').src = 'https://via.placeholder.com/150/198754/ffffff?text=User';
          }
        }
      } else {
        throw new Error('Network error');
      }
    } catch (error) {
      console.error('Lỗi upload ảnh:', error);
      showErrorAlert('Lỗi kết nối server khi upload ảnh');
      // Restore original image
      if (originalProfileData.imageUrl) {
        document.getElementById('profileImage').src = originalProfileData.imageUrl;
      } else {
        document.getElementById('profileImage').src = 'https://via.placeholder.com/150/198754/ffffff?text=User';
      }
    }
  }

  async function saveAvatarToProfile(imageUrl) {
    try {
      const profileData = {
        fullName: originalProfileData.fullName,
        email: originalProfileData.email,
        phone: originalProfileData.phone,
        birthday: originalProfileData.birthday,
        gender: originalProfileData.gender,
        address: originalProfileData.address,
        imageUrl: imageUrl
      };

      const response = await fetch('/api/users/profile', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + getAuthToken()
        },
        body: JSON.stringify(profileData)
      });

      if (response.ok) {
        showSuccessAlert('Cập nhật ảnh đại diện thành công!');
        
        // Update original data with new image URL
        originalProfileData.imageUrl = imageUrl;
        
        // Update avatars globally using auth-utils
        if (window.authUtils && window.authUtils.updateGlobalAvatar) {
          window.authUtils.updateGlobalAvatar(imageUrl);
        }
        
      } else {
        const error = await response.json();
        showErrorAlert(error.message || 'Lỗi cập nhật ảnh đại diện');
        // Restore original image on failure
        if (originalProfileData.imageUrl) {
          document.getElementById('profileImage').src = originalProfileData.imageUrl;
        } else {
          document.getElementById('profileImage').src = 'https://via.placeholder.com/150/198754/ffffff?text=User';
        }
      }
    } catch (error) {
      console.error('Lỗi lưu ảnh đại diện:', error);
      showErrorAlert('Lỗi kết nối server khi lưu ảnh');
      // Restore original image on failure
      if (originalProfileData.imageUrl) {
        document.getElementById('profileImage').src = originalProfileData.imageUrl;
      } else {
        document.getElementById('profileImage').src = 'https://via.placeholder.com/150/198754/ffffff?text=User';
      }
    }
  }

  async function saveProfile() {
    try {
      const profileData = {
        fullName: document.getElementById('fullName').value.trim(),
        email: document.getElementById('email').value.trim(),
        phone: document.getElementById('phone').value.trim(),
        birthday: document.getElementById('birthday').value,
        gender: document.getElementById('gender').value,
        address: document.getElementById('address').value.trim()
      };

      // Validate required fields
      if (!profileData.email) {
        showErrorAlert('Email không được để trống');
        return;
      }

      // Giữ nguyên imageUrl hiện tại (đã được lưu riêng khi upload)
      if (originalProfileData.imageUrl) {
        profileData.imageUrl = originalProfileData.imageUrl;
      }

      console.log('Sending profile data:', profileData); // Debug log

      const response = await fetch('/api/users/profile', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + getAuthToken()
        },
        body: JSON.stringify(profileData)
      });

      console.log('Response status:', response.status); // Debug log

      if (response.ok) {
        const result = await response.json();
        console.log('Save result:', result); // Debug log
        
        // Check if the backend returned success
        if (result && result.success === true) {
          showSuccessAlert('Lưu thông tin thành công!');
          
          // Update display fields
          updateDisplayFields();
          
          // Update sidebar user name if exists
          const sidebarUserName = document.querySelector('#userName');
          if (sidebarUserName) {
            sidebarUserName.textContent = profileData.fullName || originalProfileData.username;
          }
          
          // Update original data with saved data
          originalProfileData = { ...originalProfileData, ...profileData };
          
          // Exit edit mode after successful save
          isEditMode = false;
          pendingChanges = false;
          toggleEditMode();
        } else {
          showErrorAlert('Lưu thất bại: ' + (result.message || 'Phản hồi không hợp lệ từ server'));
        }
      } else {
        const errorText = await response.text();
        console.error('Save failed:', response.status, errorText);
        showErrorAlert(`Lỗi ${response.status}: ${errorText || 'Không thể cập nhật thông tin'}`);
      }
    } catch (error) {
      console.error('Lỗi lưu thông tin:', error);
      showErrorAlert('Lỗi kết nối server: ' + error.message);
    }
  }

  async function autoSaveProfile() {
    try {
      const profileData = {
        fullName: document.getElementById('fullName').value,
        email: document.getElementById('email').value,
        phone: document.getElementById('phone').value,
        birthday: document.getElementById('birthday').value,
        gender: document.getElementById('gender').value,
        address: document.getElementById('address').value
      };

      if (originalProfileData.imageUrl) {
        profileData.imageUrl = originalProfileData.imageUrl;
      }

      await fetch('/api/users/profile', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + getAuthToken()
        },
        body: JSON.stringify(profileData)
      });

      // Update original data silently
      originalProfileData = { ...originalProfileData, ...profileData };
      pendingChanges = false;
    } catch (error) {
      console.error('Auto-save failed:', error);
    }
  }

  async function loadQuickStats() {
    try {
      // Load real stats from APIs
      const token = getAuthToken();
      
      // Get wallets count
      const walletsResponse = await fetch('/api/wallets', {
        headers: { 'Authorization': 'Bearer ' + token }
      });
      let walletsCount = 0;
      if (walletsResponse.ok) {
        const wallets = await walletsResponse.json();
        walletsCount = wallets.length;
      }
      
      // Get goals count
      const goalsResponse = await fetch('/api/goals', {
        headers: { 'Authorization': 'Bearer ' + token }
      });
      let goalsCount = 0;
      if (goalsResponse.ok) {
        const goals = await goalsResponse.json();
        goalsCount = goals.length;
      }
      
      // Get transactions count
      const transactionsResponse = await fetch('/api/transactions', {
        headers: { 'Authorization': 'Bearer ' + token }
      });
      let transactionsCount = 0;
      if (transactionsResponse.ok) {
        const transactions = await transactionsResponse.json();
        transactionsCount = transactions.length;
      }
      
      // Get budgets count
      const budgetsResponse = await fetch('/api/budgets', {
        headers: { 'Authorization': 'Bearer ' + token }
      });
      let budgetsCount = 0;
      if (budgetsResponse.ok) {
        const budgets = await budgetsResponse.json();
        budgetsCount = budgets.length;
      }
      
      // Update UI
      document.getElementById('totalWallets').textContent = walletsCount;
      document.getElementById('totalGoals').textContent = goalsCount;
      document.getElementById('totalTransactions').textContent = transactionsCount;
      document.getElementById('totalBudgets').textContent = budgetsCount;
      
    } catch (error) {
      console.error('Lỗi tải thống kê:', error);
      // Fallback to 0 if error
      document.getElementById('totalWallets').textContent = '0';
      document.getElementById('totalGoals').textContent = '0';
      document.getElementById('totalTransactions').textContent = '0';
      document.getElementById('totalBudgets').textContent = '0';
    }
  }

  async function loadActivityHistory() {
    try {
      const token = getAuthToken();
      
      // Get recent transactions (activity history)
      const transactionsResponse = await fetch('/api/transactions', {
        headers: { 'Authorization': 'Bearer ' + token }
      });
      
      let activities = [];
      
      if (transactionsResponse.ok) {
        const transactions = await transactionsResponse.json();
        
        // Convert transactions to activity format (take latest 5)
        activities = transactions.slice(0, 5).map(transaction => {
          const amount = new Intl.NumberFormat('vi-VN').format(transaction.amount);
          const timeAgo = formatTimeAgo(new Date(transaction.date));
          
          return {
            type: 'transaction',
            message: `${transaction.type === 'income' ? 'Thu nhập' : 'Chi tiêu'}: ${amount} VND`,
            time: timeAgo,
            icon: transaction.type === 'income' ? 'arrow-up' : 'arrow-down',
            color: transaction.type === 'income' ? 'success' : 'danger'
          };
        });
      }
      
      // If no transactions, show empty state
      if (activities.length === 0) {
        document.getElementById('activityList').innerHTML = `
          <div class="text-center text-muted py-4">
            <i class="fas fa-history fa-2x mb-3"></i>
            <p>Chưa có hoạt động nào</p>
            <small>Các giao dịch của bạn sẽ hiển thị ở đây</small>
          </div>
        `;
        return;
      }

      const activityHtml = activities.map(activity => `
        <div class="activity-item">
          <div class="d-flex align-items-center">
            <div class="me-3">
              <span class="badge bg-${activity.color} rounded-circle d-flex align-items-center justify-content-center" style="width: 45px; height: 45px;">
                <i class="fas fa-${activity.icon}"></i>
              </span>
            </div>
            <div class="flex-grow-1">
              <div class="fw-medium text-dark">${activity.message}</div>
              <small class="text-muted">
                <i class="fas fa-clock me-1"></i>
                ${activity.time}
              </small>
            </div>
          </div>
        </div>
      `).join('');

      document.getElementById('activityList').innerHTML = activityHtml;
    } catch (error) {
      console.error('Lỗi tải lịch sử:', error);
      document.getElementById('activityList').innerHTML = '<p class="text-muted text-center py-4">Không thể tải lịch sử hoạt động</p>';
    }
  }
  
  function formatTimeAgo(date) {
    const now = new Date();
    const diffMs = now - date;
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    
    if (diffDays > 0) {
      return `${diffDays} ngày trước`;
    } else if (diffHours > 0) {
      return `${diffHours} giờ trước`;
    } else if (diffMinutes > 0) {
      return `${diffMinutes} phút trước`;
    } else {
      return 'Vừa xong';
    }
  }

  function showSuccessAlert(message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-success alert-dismissible fade show save-indicator';
    alertDiv.innerHTML = `
      <i class="fas fa-check-circle me-2"></i><strong>${message}</strong>
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.body.appendChild(alertDiv);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
      if (alertDiv.parentNode) {
        alertDiv.remove();
      }
    }, 3000);
  }

  function showErrorAlert(message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-danger alert-dismissible fade show save-indicator';
    alertDiv.innerHTML = `
      <i class="fas fa-exclamation-circle me-2"></i><strong>Lỗi!</strong> ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.body.appendChild(alertDiv);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
      if (alertDiv.parentNode) {
        alertDiv.remove();
      }
    }, 5000);
  }
</script>